<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on bordeltabernacle</title>
    <link>/post/</link>
    <description>Recent content in Posts on bordeltabernacle</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 11 Aug 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Network Automation with Ansible Playbooks</title>
      <link>/post/2016/08/network-automation-with-ansible-playbooks/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016/08/network-automation-with-ansible-playbooks/</guid>
      <description>&lt;p&gt;Following on from my &lt;a href=&#34;https://bordeltabernacle.github.io/2016/08/01/starting-out-with-ansible-cisco-and-network-automation.html&#34;&gt;previous post&lt;/a&gt;, I want to take a look at &lt;em&gt;playbooks&lt;/em&gt;,
the mechanism Ansible uses for building and managing task automation. Playbooks
are text files that declare the tasks you want carried out in a series of
&lt;em&gt;plays&lt;/em&gt;. This text file can then easily be re-used, shared, and version controlled.
Let&amp;rsquo;s have a look at how we use them then, yeah?&lt;/p&gt;

&lt;p&gt;Okay, so &lt;a href=&#34;https://bordeltabernacle.github.io/2016/08/01/starting-out-with-ansible-cisco-and-network-automation.html&#34;&gt;previously&lt;/a&gt; we had an inventory file that listed the hosts in our
lab network.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[routers]
router-one ansible_host=192.168.0.1
router-two ansible_host=192.168.0.2
router-three ansible_host=192.168.0.3

[routers:vars]
ansible_user=vagrant
ansible_password=vagrant
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s add our first playbook.  Playbooks are written as &lt;em&gt;yaml&lt;/em&gt; files, a format equivalent to &lt;em&gt;json&lt;/em&gt; or &lt;em&gt;xml&lt;/em&gt; but intended to be more human readable. Be warned, &lt;em&gt;yaml&lt;/em&gt; is very particular about whitespace. If we create a new file alongside out playbook called &lt;code&gt;get_inventory_info.yaml&lt;/code&gt;, we&amp;rsquo;ll use it to get the output from a &lt;code&gt;show inventory&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;{% raw %}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
- name: Get Inventory Information
  hosts: routers
  tasks:
    - name: Send Show Inventory Command
      ios_command:
        host: &amp;quot;{{ ansible_host }}&amp;quot;
        username: &amp;quot;{{ ansible_user }}&amp;quot;
        password: &amp;quot;{{ ansible_password }}&amp;quot;
        commands:
          - show inventory
      register: inventory
    - debug: var=inventory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endraw %}&lt;/p&gt;

&lt;p&gt;So, what&amp;rsquo;s going on here?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;---&lt;/code&gt; indicates that it&amp;rsquo;s a &lt;em&gt;yaml&lt;/em&gt; file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name: Get Inventory Information&lt;/code&gt; is the name of our playbook&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hosts: routers&lt;/code&gt; is the devices we want to target&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tasks:&lt;/code&gt; what follows is the list of tasks we want to carry out&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name: Send Show Inventory Command&lt;/code&gt; is the name of our task&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ios_command:&lt;/code&gt; this is &lt;a href=&#34;https://docs.ansible.com/ansible/ios_command_module.html&#34;&gt;the module&lt;/a&gt; we are using&lt;/li&gt;
&lt;li&gt;{% raw %}&lt;code&gt;host: &amp;quot;{{ ansible_host }}&amp;quot;&lt;/code&gt;{% endraw %}, {% raw %}&lt;code&gt;username: &amp;quot;{{ ansible_user }}&amp;quot;&lt;/code&gt;{% endraw %} &amp;amp; {% raw %}&lt;code&gt;password: &amp;quot;{{ ansible_password }}&amp;quot;&lt;/code&gt;{% endraw %} are the connection details we&amp;rsquo;re going to use. The {% raw %}&lt;code&gt;{{ }}&lt;/code&gt;{% endraw %} means that this is a variable. All variables exist within the Ansible environment you&amp;rsquo;re in, in this case these variables are from the &lt;em&gt;inventory&lt;/em&gt; file above. Doing this means we can loop through all the hosts in our &lt;em&gt;routers&lt;/em&gt; group, and they can have different username/password combinations if needs be.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commands: - show inventory&lt;/code&gt; is the command we&amp;rsquo;ll be using.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;register: inventory&lt;/code&gt; here we&amp;rsquo;re storing the output of the task in the variable &lt;code&gt;inventory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debug: var=inventory&lt;/code&gt; this will output the variable &lt;code&gt;inventory&lt;/code&gt; to our terminal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To run this we use the &lt;code&gt;ansible-playbook&lt;/code&gt; command, along with the name of our playbook and the &lt;code&gt;-i&lt;/code&gt; flag to specify our inventory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ansible-playbook get_inventory_info.yaml -i inventory&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;OK, let&amp;rsquo;s go&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;PLAY [Get Inventory Information] ***********************************************

TASK [setup] *******************************************************************
fatal: [router-one]: UNREACHABLE! =&amp;gt; {&amp;quot;changed&amp;quot;: false, &amp;quot;msg&amp;quot;: &amp;quot;SSH Error: data could not be sent to the remote host. Make sure this host can be reached over ssh&amp;quot;, &amp;quot;unreachable&amp;quot;: true}
fatal: [router-two]: UNREACHABLE! =&amp;gt; {&amp;quot;changed&amp;quot;: false, &amp;quot;msg&amp;quot;: &amp;quot;SSH Error: data could not be sent to the remote host. Make sure this host can be reached over ssh&amp;quot;, &amp;quot;unreachable&amp;quot;: true}
fatal: [router-three]: UNREACHABLE! =&amp;gt; {&amp;quot;changed&amp;quot;: false, &amp;quot;msg&amp;quot;: &amp;quot;SSH Error: data could not be sent to the remote host. Make sure this host can be reached over ssh&amp;quot;, &amp;quot;unreachable&amp;quot;: true}

PLAY RECAP *********************************************************************
router-one                : ok=0    changed=0    unreachable=1    failed=0
router-two               : ok=0    changed=0    unreachable=1    failed=0
router-three             : ok=0    changed=0    unreachable=1    failed=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arggh, whaa? This is because we&amp;rsquo;re dealing with Cisco pets not server cattle. As I mentioned before, Ansible is trying to run some Python code on our hosts, which is not going to happen with Cisco IOS, we need to run the code on our local machine. So let&amp;rsquo;s add the following to our &lt;em&gt;inventory&lt;/em&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[routers:vars]
ansible_connection=local
ansible_user=vagrant
ansible_password=vagrant
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That line there, &lt;code&gt;ansible_connection=local&lt;/code&gt;, should take care of this problem for us.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;PLAY [Get Inventory Information] ***********************************************

TASK [setup] *******************************************************************
ok: [router-one]
ok: [router-one]
ok: [router-two]

TASK [Send Show Inventory Command] *********************************************
ok: [router-one]
ok: [router-one]
ok: [router-two]

TASK [debug] *******************************************************************
ok: [router-two] =&amp;gt; {
    &amp;quot;output&amp;quot;: {
        &amp;quot;changed&amp;quot;: false,
        &amp;quot;stdout&amp;quot;: [
            &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ1545706V, Hw Revision: 1.0\&amp;quot;\nPID: CISCO2921/K9      , VID: V05 , SN: FCZ1545706V\n\nNAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;\nPID: PWR-2921-51-AC    , VID: V02 , SN: DCA1536K3WX\n\n&amp;quot;
        ],
        &amp;quot;stdout_lines&amp;quot;: [
            [
                &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ1545706V, Hw Revision: 1.0\&amp;quot;&amp;quot;,
                &amp;quot;PID: CISCO2921/K9      , VID: V05 , SN: FCZ1545706V&amp;quot;,
                &amp;quot;&amp;quot;,
                &amp;quot;NAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;&amp;quot;,
                &amp;quot;PID: PWR-2921-51-AC    , VID: V02 , SN: DCA1536K3WX&amp;quot;,
                &amp;quot;&amp;quot;,
                &amp;quot;&amp;quot;
            ]
        ]
    }
}
ok: [router-two] =&amp;gt; {
    &amp;quot;output&amp;quot;: {
        &amp;quot;changed&amp;quot;: false,
        &amp;quot;stdout&amp;quot;: [
            &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ192570GZ, Hw Revision: 1.0\&amp;quot;\nPID: CISCO2921/K9      , VID: V08 , SN: FCZ192570GZ\n\nNAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;\nPID: PWR-2921-51-AC    , VID: V03 , SN: QCS19060PYS\n\n&amp;quot;
        ],
        &amp;quot;stdout_lines&amp;quot;: [
            [
                &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ192570GZ, Hw Revision: 1.0\&amp;quot;&amp;quot;,
                &amp;quot;PID: CISCO2921/K9      , VID: V08 , SN: FCZ192570GZ&amp;quot;,
                &amp;quot;&amp;quot;,
                &amp;quot;NAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;&amp;quot;,
                &amp;quot;PID: PWR-2921-51-AC    , VID: V03 , SN: QCS19060PYS&amp;quot;,
                &amp;quot;&amp;quot;,
                &amp;quot;&amp;quot;
            ]
        ]
    }
}
ok: [router-three] =&amp;gt; {
    &amp;quot;output&amp;quot;: {
        &amp;quot;changed&amp;quot;: false,
        &amp;quot;stdout&amp;quot;: [
            &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ192560EG, Hw Revision: 1.0\&amp;quot;\nPID: CISCO2921/K9      , VID: V08 , SN: FCZ192560EG\n\nNAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;\nPID: PWR-2921-51-AC    , VID: V03 , SN: QCS19060RV1\n\n&amp;quot;
        ],
        &amp;quot;stdout_lines&amp;quot;: [
            [
                &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ192560EG, Hw Revision: 1.0\&amp;quot;&amp;quot;,
                &amp;quot;PID: CISCO2921/K9      , VID: V08 , SN: FCZ192560EG&amp;quot;,
                &amp;quot;&amp;quot;,
                &amp;quot;NAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;&amp;quot;,
                &amp;quot;PID: PWR-2921-51-AC    , VID: V03 , SN: QCS19060RV1&amp;quot;,
                &amp;quot;&amp;quot;,
                &amp;quot;&amp;quot;
            ]
        ]
    }
}

PLAY RECAP *********************************************************************
router-one                : ok=3    changed=0    unreachable=0    failed=0
router-two                : ok=3    changed=0    unreachable=0    failed=0
router-three              : ok=3    changed=0    unreachable=0    failed=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yessss! Job&amp;rsquo;s a good &amp;lsquo;un, let&amp;rsquo;s go home.
Nah, not yet. We can smooth things out a bit. At the beginning of the output you can see a &lt;code&gt;[setup]&lt;/code&gt; task being run, that is an Ansible default that gathers facts from the hosts, like operating system, ip address etc. However, because we&amp;rsquo;re using &lt;code&gt;ansible_connection=local&lt;/code&gt; this task is just gathering facts from the local machine, 3 times in this case! Totally useless. So we can add &lt;code&gt;gather_facts: no&lt;/code&gt; to our playbook to avoid this time waster. We also don&amp;rsquo;t need all of that output so, as this is &lt;em&gt;json&lt;/em&gt; we can be a bit more selective about it by using &lt;code&gt;debug: var=inventory.stdout_lines[0]&lt;/code&gt;. Ansible has a &lt;code&gt;provider&lt;/code&gt; argument which can be a dictionary object which defines the connection to the host, meaning we can separate this information from our playbooks, and not have to repeat it in every playbook. Our playbook now looks like this:&lt;/p&gt;

&lt;p&gt;{% raw %}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
- name: Get Inventory Information
  gather_facts: no
  hosts: routers
  tasks:
    - name: Send Show Inventory Command
      ios_command:
        provider: &amp;quot;{{ provider }}&amp;quot;
        commands:
          - show inventory
      register: inventory
    - debug: var=inventory.stdout_lines[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endraw %}&lt;/p&gt;

&lt;p&gt;To store group variables, such as &lt;code&gt;provider&lt;/code&gt;, we can use a directory called &lt;em&gt;group_vars&lt;/em&gt;. This directory name is pre-defined by Ansible. Within it we create a &lt;em&gt;yaml&lt;/em&gt; file named after the group, &lt;em&gt;routers&lt;/em&gt;. While we&amp;rsquo;re at it, if we&amp;rsquo;re creating a &lt;em&gt;routers&lt;/em&gt; variable file, we can move the variables out of our inventory into it. So, in &lt;code&gt;group_vars/routers.yaml&lt;/code&gt; we have&amp;hellip;&lt;/p&gt;

&lt;p&gt;{% raw %}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
ansible_connection: local
ansible_user: vagrant
ansible_password: vagrant
provider:
  host: &amp;quot;{{ ansible_host }}&amp;quot;
  username: &amp;quot;{{ ansible_user }}&amp;quot;
  password: &amp;quot;{{ ansible_password }}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endraw %}&lt;/p&gt;

&lt;p&gt;Really, we shouldn&amp;rsquo;t be writing our password down, should we? So let&amp;rsquo;s delete the &lt;code&gt;ansible_password: vagrant&lt;/code&gt; line and use the command line &lt;code&gt;--ask-pass&lt;/code&gt; flag instead.&lt;/p&gt;

&lt;p&gt;Our inventory file now looks like this, just fyi:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[routers]
192.168.0.1
192.168.0.2
192.168.0.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve removed the hostnames, just because, it doesn&amp;rsquo;t really change anything, except the names in the output.
If we run &lt;code&gt;ansible-playbook get_inventory_info.yaml -i inventory --ask-pass&lt;/code&gt; we get a prompt for the password&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;SSH password:

PLAY [Get Inventory Information] ***********************************************

TASK [Send Show Inventory Command] *********************************************
ok: [192.168.0.2]
ok: [192.168.0.3]
ok: [192.168.0.1]

TASK [debug] *******************************************************************
ok: [192.168.0.1] =&amp;gt; {
    &amp;quot;inventory.stdout_lines[0]&amp;quot;: [
        &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ1545706V, Hw Revision: 1.0\&amp;quot;&amp;quot;,
        &amp;quot;PID: CISCO2921/K9      , VID: V05 , SN: FCZ1545706V&amp;quot;,
        &amp;quot;&amp;quot;,
        &amp;quot;NAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;&amp;quot;,
        &amp;quot;PID: PWR-2921-51-AC    , VID: V02 , SN: DCA1536K3WX&amp;quot;,
        &amp;quot;&amp;quot;,
        &amp;quot;&amp;quot;
    ]
}
ok: [192.168.0.2] =&amp;gt; {
    &amp;quot;inventory.stdout_lines[0]&amp;quot;: [
        &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ192570GZ, Hw Revision: 1.0\&amp;quot;&amp;quot;,
        &amp;quot;PID: CISCO2921/K9      , VID: V08 , SN: FCZ192570GZ&amp;quot;,
        &amp;quot;&amp;quot;,
        &amp;quot;NAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;&amp;quot;,
        &amp;quot;PID: PWR-2921-51-AC    , VID: V03 , SN: QCS19060PYS&amp;quot;,
        &amp;quot;&amp;quot;,
        &amp;quot;&amp;quot;
    ]
}
ok: [192.168.0.3] =&amp;gt; {
    &amp;quot;inventory.stdout_lines[0]&amp;quot;: [
        &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ192560EG, Hw Revision: 1.0\&amp;quot;&amp;quot;,
        &amp;quot;PID: CISCO2921/K9      , VID: V08 , SN: FCZ192560EG&amp;quot;,
        &amp;quot;&amp;quot;,
        &amp;quot;NAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;&amp;quot;,
        &amp;quot;PID: PWR-2921-51-AC    , VID: V03 , SN: QCS19060RV1&amp;quot;,
        &amp;quot;&amp;quot;,
        &amp;quot;&amp;quot;
    ]
}

PLAY RECAP *********************************************************************
192.168.0.1                : ok=2    changed=0    unreachable=0    failed=0
192.168.0.2                : ok=2    changed=0    unreachable=0    failed=0
192.168.0.3                : ok=2    changed=0    unreachable=0    failed=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There, that&amp;rsquo;s a bit clearer. If we want we can add a few commands in to our playbook. Let&amp;rsquo;s change the name of it to &lt;code&gt;get_device_information.yaml&lt;/code&gt; and change it to this:&lt;/p&gt;

&lt;p&gt;{% raw %}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
- name: Get Device Information
  gather_facts: no
  hosts: routers
  tasks:
    - name: Send Show Commands
      ios_command:
        provider: &amp;quot;{{ provider }}&amp;quot;
        commands:
          - show inventory
          - sh run | inc hostname
          - sh ver | inc image
          - sh ip int brief
      register: info
    - debug: var=info.stdout_lines
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endraw %}&lt;/p&gt;

&lt;p&gt;Run it. &lt;code&gt;ansible-playbook get_device_info.yaml -i inventory --ask-pass&lt;/code&gt; and a brief moment later&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;SSH password:

PLAY [Get Device Information] **************************************************

TASK [Send Show Commands] ******************************************************
ok: [192.168.0.3]
ok: [192.168.0.1]
ok: [192.168.0.2]

TASK [debug] *******************************************************************
ok: [192.168.0.1] =&amp;gt; {
    &amp;quot;info.stdout_lines&amp;quot;: [
        [
            &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ1545706V, Hw Revision: 1.0\&amp;quot;&amp;quot;,
            &amp;quot;PID: CISCO2921/K9      , VID: V05 , SN: FCZ1545706V&amp;quot;,
            &amp;quot;&amp;quot;,
            &amp;quot;NAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;&amp;quot;,
            &amp;quot;PID: PWR-2921-51-AC    , VID: V02 , SN: DCA1536K3WX&amp;quot;,
            &amp;quot;&amp;quot;,
            &amp;quot;&amp;quot;
        ],
        [
            &amp;quot;hostname router-one&amp;quot;
        ],
        [
            &amp;quot;System image file is \&amp;quot;flash0:c2900-IMAGE-ONE.SPA.154-3.M3.bin\&amp;quot;&amp;quot;
        ],
        [
            &amp;quot;Interface                  IP-Address      OK? Method Status                Protocol&amp;quot;,
            &amp;quot;Embedded-Service-Engine0/0 unassigned      YES NVRAM  administratively down down    &amp;quot;,
            &amp;quot;GigabitEthernet0/0         192.168.0.1     YES NVRAM  up                    up      &amp;quot;,
            &amp;quot;GigabitEthernet0/1         10.10.10.11     YES manual down                  down    &amp;quot;,
            &amp;quot;GigabitEthernet0/2         unassigned      YES NVRAM  administratively down down    &amp;quot;
        ]
    ]
}
ok: [192.168.0.3] =&amp;gt; {
    &amp;quot;info.stdout_lines&amp;quot;: [
        [
            &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ192560EG, Hw Revision: 1.0\&amp;quot;&amp;quot;,
            &amp;quot;PID: CISCO2921/K9      , VID: V08 , SN: FCZ192560EG&amp;quot;,
            &amp;quot;&amp;quot;,
            &amp;quot;NAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;&amp;quot;,
            &amp;quot;PID: PWR-2921-51-AC    , VID: V03 , SN: QCS19060RV1&amp;quot;,
            &amp;quot;&amp;quot;,
            &amp;quot;&amp;quot;
        ],
        [
            &amp;quot;hostname router-three&amp;quot;
        ],
        [
            &amp;quot;System image file is \&amp;quot;flash0:c2900-IMAGE-ONE.SPA.154-3.M3.bin\&amp;quot;&amp;quot;
        ],
        [
            &amp;quot;Interface                  IP-Address      OK? Method Status                Protocol&amp;quot;,
            &amp;quot;Embedded-Service-Engine0/0 unassigned      YES NVRAM  administratively down down    &amp;quot;,
            &amp;quot;GigabitEthernet0/0         192.168.0.3     YES NVRAM  up                    up      &amp;quot;,
            &amp;quot;GigabitEthernet0/1         10.10.10.13     YES manual down                  down    &amp;quot;,
            &amp;quot;GigabitEthernet0/2         unassigned      YES NVRAM  administratively down down    &amp;quot;
        ]
    ]
}
ok: [192.168.0.2] =&amp;gt; {
    &amp;quot;info.stdout_lines&amp;quot;: [
        [
            &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ192570GZ, Hw Revision: 1.0\&amp;quot;&amp;quot;,
            &amp;quot;PID: CISCO2921/K9      , VID: V08 , SN: FCZ192570GZ&amp;quot;,
            &amp;quot;&amp;quot;,
            &amp;quot;NAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;&amp;quot;,
            &amp;quot;PID: PWR-2921-51-AC    , VID: V03 , SN: QCS19060PYS&amp;quot;,
            &amp;quot;&amp;quot;,
            &amp;quot;&amp;quot;
        ],
        [
            &amp;quot;hostname router-two&amp;quot;
        ],
        [
            &amp;quot;System image file is \&amp;quot;flash0:c2900-IMAGE-ONE.SPA.154-3.M3.bin\&amp;quot;&amp;quot;
        ],
        [
            &amp;quot;Interface                  IP-Address      OK? Method Status                Protocol&amp;quot;,
            &amp;quot;Embedded-Service-Engine0/0 unassigned      YES NVRAM  administratively down down    &amp;quot;,
            &amp;quot;GigabitEthernet0/0         192.168.0.2     YES NVRAM  up                    up      &amp;quot;,
            &amp;quot;GigabitEthernet0/1         10.10.10.12     YES manual down                  down    &amp;quot;,
            &amp;quot;GigabitEthernet0/2         unassigned      YES NVRAM  administratively down down    &amp;quot;
        ]
    ]
}

PLAY RECAP *********************************************************************
192.168.0.1                : ok=2    changed=0    unreachable=0    failed=0
192.168.0.2                : ok=2    changed=0    unreachable=0    failed=0
192.168.0.3                : ok=2    changed=0    unreachable=0    failed=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lovely, &lt;em&gt;now&lt;/em&gt; we can go home.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s more to do here, such as saving this output to file &amp;amp; sending configuration changes, but we can do that later.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Songs to Code to: Flesh Without Blood</title>
      <link>/post/2016/08/grimes-flesh-without-blood/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016/08/grimes-flesh-without-blood/</guid>
      <description>&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/Tv9YoYCKNoE&#34; frameborder=&#34;0&#34;&gt; &lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Vagrant to set up an Ansible Environment</title>
      <link>/post/2016-08-03-using-vagrant-set-up-ansible-environment/</link>
      <pubDate>Wed, 03 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-08-03-using-vagrant-set-up-ansible-environment/</guid>
      <description>&lt;p&gt;Vagrant is a tool for creating, managing and sharing Virtual Machines. It&amp;rsquo;s
really helpful for creating contained environments with specific requirements
that can be easily built up, tore down and shared with others. It&amp;rsquo;s especially
helpful if, like me, you have to spend time working on a Windows laptop, because,
well, Enterprise.&lt;/p&gt;

&lt;p&gt;Following on from my &lt;a href=&#34;https://bordeltabernacle.github.io/2016/08/01/starting-out-with-ansible-cisco-and-network-automation.html&#34;&gt;previous post&lt;/a&gt;,
I&amp;rsquo;ve found that Vagrant is a fairly painless way to expose the network engineers
I work with to Ansible. Once it&amp;rsquo;s installed, I can share a zip file for them to
unzip and run &lt;code&gt;vagrant up&lt;/code&gt; and &lt;code&gt;vagrant ssh&lt;/code&gt; from the command line, and they&amp;rsquo;re
in a working Ansible environment. And if they mess something up, they can just
destroy it and start again, no bother. Let&amp;rsquo;s get set up&amp;hellip;&lt;/p&gt;

&lt;p&gt;Vagrant manages VM&amp;rsquo;s through a hypervisor, with the default being Virtualbox,
though you can use VMware if you have the extra cash. Therefore we need to
install Virtualbox first, from &lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34;&gt;here&lt;/a&gt;.
We&amp;rsquo;re going ot grab the Windows &lt;code&gt;.exe&lt;/code&gt; file.  Double click on it, and follow
the defaults through to the end.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/vbox_download.png&#34; alt=&#34;vbox_download&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now we can install Vagrant, from &lt;a href=&#34;https://www.vagrantup.com/downloads.html&#34;&gt;here&lt;/a&gt;,
grabbing the Windows &lt;code&gt;.msi&lt;/code&gt; file, double clicking on it once it&amp;rsquo;s downloaded and
following the defaults.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/vagrant_download.png&#34; alt=&#34;vagrant_download&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Vagrant is a command line tool, so you&amp;rsquo;re gonna have to be comfortable on the
command line, not too much, just enough to know what it is, how to access it
and how to navigate the directory structure, whether it&amp;rsquo;s through &lt;code&gt;cmd.exe&lt;/code&gt; or
Powershell. I&amp;rsquo;m not going to go into any of that here, but I would recommend
getting &lt;a href=&#34;http://cmder.net/&#34;&gt;cmder&lt;/a&gt; if you&amp;rsquo;re going to spend any sort of time
on the Windows command line.&lt;/p&gt;

&lt;p&gt;So, at your command prompt, if all has been successful you should be able to
type &lt;code&gt;vagrant --version&lt;/code&gt; and get the version of vagrant you have installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Vagrant 1.8.4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Grand. The beauty of Vagrant is that it&amp;rsquo;s configured from a simple text file,
the &lt;em&gt;Vagrantfile&lt;/em&gt;.  To create one, start a new directory, and then, on the
command line, navigate to within this new directory and type &lt;code&gt;vagrant init&lt;/code&gt;.
This will create a new, highly commented &lt;em&gt;Vagrantfile&lt;/em&gt;.  Read it, and get an
idea of what the different options are. Like most things, you often start with
a bare bones structure like this basic &lt;em&gt;Vagrantfile&lt;/em&gt;, and build it up as you
learn more and your requirements change. Here I&amp;rsquo;m going to explain the Vagrantfile
I use to set up my Ansible machine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

vagrant_root = File.dirname(__FILE__)
project_name = &amp;quot;acp&amp;quot;

Vagrant.configure(2) do |config|
    config.vm.box = &amp;quot;ubuntu/trusty64&amp;quot;
    config.vm.box_url = &amp;quot;https://atlas.hashicorp.com/ubuntu/boxes/trusty64&amp;quot;
    config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
        vb.memory = &amp;quot;1028&amp;quot;
        vb.cpus = &amp;quot;1&amp;quot;
    end

    config.vm.define &amp;quot;#{project_name}&amp;quot; do |machine|
        machine.vm.hostname = &amp;quot;#{project_name}&amp;quot;
        machine.vm.synced_folder &amp;quot;#{vagrant_root}/shared&amp;quot;, &amp;quot;/home/vagrant/shared&amp;quot;
        machine.vm.provision :shell, :path =&amp;gt; &amp;quot;#{vagrant_root}/ansible-setup.sh&amp;quot;
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vagrant is written in Ruby, and the first two lines are to do with the Ruby language. Next up we have a couple of variables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;vagrant_root = File.dirname(__FILE__)
project_name = &amp;quot;acp&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vagrant_root&lt;/code&gt; is the current working directory of the Vagrantfile&lt;/li&gt;
&lt;li&gt;&lt;code&gt;project_name&lt;/code&gt; is the name of the project, here it is &lt;code&gt;acp&lt;/code&gt; for Ansible Cisco Playground.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The next section of the &lt;em&gt;Vagrantfile&lt;/em&gt; starts the machine configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.vm.box = &amp;quot;ubuntu/trusty64&amp;quot;
config.vm.box_url = &amp;quot;https://atlas.hashicorp.com/ubuntu/boxes/trusty64&amp;quot;
config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
    vb.memory = &amp;quot;1028&amp;quot;
    vb.cpus = &amp;quot;1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config.vm.box = &amp;quot;ubuntu/trusty64&amp;quot;&lt;/code&gt; defines the base operating system, or Vagrant &lt;em&gt;box&lt;/em&gt;, for the VM, here we&amp;rsquo;re using the official Ubuntu 14.04 Server image, but this can be changed to any one of a multitude of Vagrant &lt;em&gt;boxes&lt;/em&gt;, that can be found &lt;a href=&#34;https://vagrantcloud.com/boxes/search&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config.vm.box_url = &amp;quot;https://atlas.hashicorp.com/ubuntu/boxes/trusty64&amp;quot;&lt;/code&gt; is the url where this box is&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|&lt;/code&gt; this says that if the &lt;code&gt;provider&lt;/code&gt;, the hypervisor, is Virtualbox, do the following&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vb.memory = &amp;quot;1028&amp;quot;&lt;/code&gt; gives the VM 1 GB of RAM&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vb.cpus = &amp;quot;1&amp;quot;&lt;/code&gt; gives the VM 1 CPU&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last section is where it gets interesting&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.vm.define &amp;quot;#{project_name}&amp;quot; do |machine|
    machine.vm.hostname = &amp;quot;#{project_name}&amp;quot;
    machine.vm.synced_folder &amp;quot;#{vagrant_root}/shared&amp;quot;, &amp;quot;/home/vagrant/shared&amp;quot;
    machine.vm.provision :shell, :path =&amp;gt; &amp;quot;#{vagrant_root}/ansible-setup.sh&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config.vm.define &amp;quot;#{project_name}&amp;quot; do |machine|&lt;/code&gt; here we start to define some parameters for the machine&lt;/li&gt;
&lt;li&gt;&lt;code&gt;machine.vm.hostname = &amp;quot;#{project_name}&amp;quot;&lt;/code&gt; defines the hostname of the machine as the project name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;machine.vm.synced_folder &amp;quot;#{vagrant_root}/shared&amp;quot;, &amp;quot;/home/vagrant/shared&amp;quot;&lt;/code&gt;
this sets up a shared folder between the VM and the host computer, my laptop.
&lt;code&gt;&amp;quot;#{vagrant_root}/shared&amp;quot;&lt;/code&gt; is a folder on the host, within the same directory
as the &lt;em&gt;Vagrantfile&lt;/em&gt;, &lt;code&gt;&amp;quot;/home/vagrant/shared&amp;quot;&lt;/code&gt; is a folder in the vagrant user&amp;rsquo;s
home directory on the VM. These folders will be synced, any changes made in one
will be reflected in the other. This means I can edit and version control files
on my host machine, using my usual workflow, and I can use them easily in the VM,
rather than having to do this work inside the VM.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;machine.vm.provision :shell, :path =&amp;gt; &amp;quot;#{vagrant_root}/ansible-setup.sh&amp;quot;&lt;/code&gt;
this defines the path to a shell script that provisions the VM, installing Ansible.
There are different options for provisioning the Vm, including Ansible itself,
woah, meta! but I find for small environments like this a shell script does fine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the &lt;code&gt;ansible-setup.sh&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
TZ=Europe/London

echo &amp;quot;+-----------------------------------------------+&amp;quot;
echo &amp;quot;| Provisioning Ansible Cisco Playground Machine |&amp;quot;
echo &amp;quot;+-----------------------------------------------+&amp;quot;
echo &amp;quot;Setting timezone...&amp;quot;
sudo timedatectl set-timezone $TZ &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
echo &amp;quot;Adding dependencies...&amp;quot;
sudo apt-get install software-properties-common &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
echo &amp;quot;Adding Ansible repo...&amp;quot;
sudo apt-add-repository ppa:ansible/ansible &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
echo &amp;quot;Updating apt-get...&amp;quot;
sudo apt-get -y update &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
echo &amp;quot;Installing Git...&amp;quot;
sudo apt-get -y install git &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
echo &amp;quot;Installing Ansible...&amp;quot;
sudo apt-get -y install ansible &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
echo &amp;quot;Installing ntc-ansible module...&amp;quot;
sudo apt-get -y install python-pip &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
sudo apt-get -y install zlib1g-dev libxml2-dev libxslt-dev python-dev &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
sudo pip install ntc-ansible &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
git clone https://github.com/networktocode/ntc-ansible --recursive &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
sudo rm -r /home/vagrant/shared/library &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
sudo mv /home/vagrant/ntc-ansible/library /home/vagrant/shared/library &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
echo &amp;quot;+----------------------------------------------+&amp;quot;
echo &amp;quot;| Ansible Cisco Playground Machine Provisioned |&amp;quot;
echo &amp;quot;+----------------------------------------------+&amp;quot;
echo &amp;quot;|                Go build stuff!               |&amp;quot;
echo &amp;quot;+----------------------------------------------+&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a few things going on in there, including the Ansible installation and
the installation of &lt;a href=&#34;http://jedelman.com/&#34;&gt;Jason Edelman&amp;rsquo;s&lt;/a&gt; excellent third
party Ansible library &lt;a href=&#34;https://github.com/networktocode/ntc-ansible/&#34;&gt;ntc-ansible&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, if we do a &lt;code&gt;tree /F&lt;/code&gt; command in the project directory, we can see everything
we now have, the &lt;em&gt;Vagrantfile&lt;/em&gt;, the provision script, the shared folder
(currently empty), and a &lt;code&gt;.vagrant&lt;/code&gt; directory I&amp;rsquo;ve never had to do anything with
since working with Vagrant.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Folder PATH listing for volume Windows
Volume serial number is A879-5C69
C:.
├───Vagrantfile
├───ansible-setup.sh
├───shared
└───.vagrant
    └───machines
        └───acp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Right, we&amp;rsquo;re ready to go. I&amp;rsquo;ve found the vagrant commands I use most often are&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vagrant up&lt;/code&gt; brings the machine up&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vagrant ssh&lt;/code&gt; establishes an ssh connection to the VM&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vagrant halt&lt;/code&gt; shuts the VM down&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vagrant reload&lt;/code&gt; restarts the VM&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vagrant destroy&lt;/code&gt; destroys the VM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the command line, inside the Vagrant project directory, type in &lt;code&gt;vagrant up&lt;/code&gt;,
and this should, fingers crossed, bring up the new VM.  If this is the first
Vagrant machine you&amp;rsquo;ve created it&amp;rsquo;s going to take some time to download the
Ubuntu image, 15-20 mins maybe. I already have the relevant Ubuntu image, so it
only takes ~60 secs to bring the VM up.  This is the output I get&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Bringing machine &#39;acp&#39; up with &#39;virtualbox&#39; provider...
==&amp;gt; acp: Importing base box &#39;ubuntu/trusty64&#39;...
==&amp;gt; acp: Matching MAC address for NAT networking...
==&amp;gt; acp: Checking if box &#39;ubuntu/trusty64&#39; is up to date...
==&amp;gt; acp: A newer version of the box &#39;ubuntu/trusty64&#39; is available! You currently
==&amp;gt; acp: have version &#39;20160708.1.2&#39;. The latest is version &#39;20160801.0.0&#39;. Run
==&amp;gt; acp: `vagrant box update` to update.
==&amp;gt; acp: Setting the name of the VM: ansible_cisco_playground_acp_1470214415769_53070
==&amp;gt; acp: Clearing any previously set forwarded ports...
==&amp;gt; acp: Clearing any previously set network interfaces...
==&amp;gt; acp: Preparing network interfaces based on configuration...
    acp: Adapter 1: nat
==&amp;gt; acp: Forwarding ports...
    acp: 22 (guest) =&amp;gt; 2222 (host) (adapter 1)
==&amp;gt; acp: Running &#39;pre-boot&#39; VM customizations...
==&amp;gt; acp: Booting VM...
==&amp;gt; acp: Waiting for machine to boot. This may take a few minutes...
    acp: SSH address: 127.0.0.1:2222
    acp: SSH username: vagrant
    acp: SSH auth method: private key
    acp:
    acp: Vagrant insecure key detected. Vagrant will automatically replace
    acp: this with a newly generated keypair for better security.
    acp:
    acp: Inserting generated public key within guest...
    acp: Removing insecure key from the guest if it is present...
    acp: Key inserted! Disconnecting and reconnecting using new SSH key...
==&amp;gt; acp: Machine booted and ready!
==&amp;gt; acp: Checking for guest additions in VM...
    acp: The guest additions on this VM do not match the installed version of
    acp: VirtualBox! In most cases this is fine, but in rare cases it can
    acp: prevent things such as shared folders from working properly. If you see
    acp: shared folder errors, please make sure the guest additions within the
    acp: virtual machine match the version of VirtualBox you have installed on
    acp: your host and reload your VM.
    acp:
    acp: Guest Additions Version: 4.3.36
    acp: VirtualBox Version: 5.0
==&amp;gt; acp: Setting hostname...
==&amp;gt; acp: Mounting shared folders...
    acp: /vagrant =&amp;gt; C:/Users/robertph/code/ansible/ansible_cisco_playground
    acp: /home/vagrant/shared =&amp;gt; C:/Users/robertph/code/ansible/ansible_cisco_playground/shared
==&amp;gt; acp: Running provisioner: shell...
    acp: Running: C:/Users/robertph/AppData/Local/Temp/vagrant-shell20160803-7424-cqcd1j.sh
==&amp;gt; acp: stdin: is not a tty
==&amp;gt; acp: +-----------------------------------------------+
==&amp;gt; acp: | Provisioning Ansible Cisco Playground Machine |
==&amp;gt; acp: +-----------------------------------------------+
==&amp;gt; acp: Setting timezone...
==&amp;gt; acp: Adding dependencies...
==&amp;gt; acp: Adding Ansible repo...
==&amp;gt; acp: Updating apt-get...
==&amp;gt; acp: Installing Git...
==&amp;gt; acp: Installing Ansible...
==&amp;gt; acp: Installing ntc-ansible module...
==&amp;gt; acp: +----------------------------------------------+
==&amp;gt; acp: | Ansible Cisco Playground Machine Provisioned |
==&amp;gt; acp: +----------------------------------------------+
==&amp;gt; acp: |                Go build stuff!               |
==&amp;gt; acp: +----------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The bottom part is the provision script, this will only run the first time the
machine is started.  Otherwise the output will be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;==&amp;gt; acp: Machine already provisioned. Run `vagrant provision` or use the `--provision`
==&amp;gt; acp: flag to force provisioning. Provisioners marked to run always will still run.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will also be a lot quicker bringing the machine up, a few seconds maybe. So
much quicker than dealing with Virtualbox manually.&lt;/p&gt;

&lt;p&gt;We can check the status of the machine with &lt;code&gt;vagrant status&lt;/code&gt;&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Current machine states:

acp                       running (virtualbox)

The VM is running. To stop this VM, you can run `vagrant halt` to
shut it down forcefully, or you can run `vagrant suspend` to simply
suspend the virtual machine. In either case, to restart it again,
simply run `vagrant up`.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And so now that we have a running VM, we need to access it. For this we use the
&lt;code&gt;vagrant ssh&lt;/code&gt; command, which will bring us into the VM&amp;rsquo;s command line&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Welcome to Ubuntu 14.04.4 LTS (GNU/Linux 3.13.0-92-generic x86_64)

 * Documentation:  https://help.ubuntu.com/

  System information as of Wed Aug  3 10:08:49 BST 2016

  System load:  0.48              Processes:           81
  Usage of /:   4.2% of 39.34GB   Users logged in:     0
  Memory usage: 12%               IP address for eth0: 10.0.2.15
  Swap usage:   0%

  Graph this data and manage this system at:
    https://landscape.canonical.com/

  Get cloud support with Ubuntu Advantage Cloud Guest:
    http://www.ubuntu.com/business/services/cloud

New release &#39;16.04.1 LTS&#39; available.
Run &#39;do-release-upgrade&#39; to upgrade to it.


vagrant@acp:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s check Ansible is there&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vagrant@acp:~$ ansible --version
ansible 2.1.1.0
  config file = /etc/ansible/ansible.cfg
  configured module search path = Default w/o overrides
vagrant@acp:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fantastic! Let&amp;rsquo;s check we&amp;rsquo;ve got a network to the outside world&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vagrant@acp:~$ ping 8.8.8.8
PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
64 bytes from 8.8.8.8: icmp_seq=1 ttl=59 time=20.3 ms
64 bytes from 8.8.8.8: icmp_seq=2 ttl=59 time=19.9 ms
♥
--- 8.8.8.8 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1003ms
rtt min/avg/max/mdev = 19.930/20.155/20.381/0.266 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sweet. And is our shared folder there&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vagrant@acp:~$ ls -l
total 8
drwxr-xr-x 6 root    root    4096 Aug  3 09:55 ntc-ansible
drwxrwxrwx 1 vagrant vagrant 4096 Aug  3 09:56 shared
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There it is, alongside the &lt;code&gt;ntc-ansible&lt;/code&gt; module. If we create a file in there,
we should see it on our host machine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vagrant@acp:~$ echo &amp;quot;Hello Windows, from Linux&amp;quot; &amp;gt; shared/hello.txt
vagrant@acp:~$ ls -l shared/
total 1
-rwxrwxrwx 1 vagrant vagrant 26 Aug  3 10:17 hello.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/hello_msg.png&#34; alt=&#34;hello_msg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Good good, we can now start creating our Ansible files on our host machine, and
easily run them in the Vagrant VM.  And when we need to share what we&amp;rsquo;ve done,
we can just zip up the directory, or version control it in git, share it, and
others can &lt;code&gt;vagrant up&lt;/code&gt; and &lt;code&gt;vagrant ssh&lt;/code&gt; into the working environment we&amp;rsquo;ve created.&lt;/p&gt;

&lt;p&gt;This Ansible Cisco Playground directory is up on Github if you want to clone/download
it and have a play.  It is a work in progress, and a little janky currently,
with no documentation, but &lt;a href=&#34;https://github.com/bordeltabernacle/ansible_cisco_playground&#34;&gt;here it is nonetheless&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Songs to Code to: Talk Is Cheap</title>
      <link>/post/2016-07-26-chet-faker-talk-is-cheap/</link>
      <pubDate>Tue, 26 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-07-26-chet-faker-talk-is-cheap/</guid>
      <description>&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/aP_-P_BS6KY&#34; frameborder=&#34;0&#34;&gt; &lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Sam Chatmon: Sittin&#39; On Top Of The World</title>
      <link>/post/2016-01-22-sam-chatmon-sittin-on-top-of-the-world/</link>
      <pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016-01-22-sam-chatmon-sittin-on-top-of-the-world/</guid>
      <description>&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/ueEQKZcXfjc&#34; frameborder=&#34;0&#34;&gt; &lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Big Bill Broonzy: Getting Older Every Day</title>
      <link>/post/2015-09-25-big-bill-broonzy-getting-older-every-day/</link>
      <pubDate>Fri, 25 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-09-25-big-bill-broonzy-getting-older-every-day/</guid>
      <description>&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/hIWBbeUge5c&#34;frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Notes on Clojure: Keywords &amp; Symbols Confusion</title>
      <link>/post/2015-09-25-notes-on-clojure-keywords-symbols/</link>
      <pubDate>Fri, 25 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-09-25-notes-on-clojure-keywords-symbols/</guid>
      <description>&lt;p&gt;Having not used Clojure extensively yet, or really much at all, I&amp;rsquo;m still unsure as to when to use Keywords.  So I just spent a bit of time exploring them, and subsequently touched on Symbols too.  And in writing this post confused myself further in the process.  What you have here then is not a formed explanation of either Keywords or Symbols, but observations on their behaviour. While reading this, imagine me saying &amp;lsquo;huh?&amp;rsquo; and scratching my head like Stan Laurel.&lt;/p&gt;

&lt;p&gt;Keywords are described in the &lt;a href=&#34;http://clojure.org/data_structures#Data%20Structures-Keywords&#34;&gt;Clojure docs&lt;/a&gt;, within the Data Structures section, as such:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;Keywords are symbolic identifiers that evaluate to themselves. They provide very fast equality tests. Like Symbols, they have names and optional namespaces, both of which are strings. The leading &amp;lsquo;:&amp;rsquo; is not part of the namespace or name.
Keywords implement IFn for invoke() of one argument (a map) with an optional second argument (a default value). For example (:mykey my-hash-map :none) means the same as (get my-hash-map :mykey :none).&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And within the lein repl:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user=&amp;gt; (doc keyword)
-------------------------
clojure.core/keyword
([name] [ns name])
  Returns a Keyword with the given namespace and name.  Do not use :
  in the keyword strings, it will be added automatically.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interestingly, on &lt;a href=&#34;https://en.wikipedia.org/wiki/Identifier&#34;&gt;Wikipedia&lt;/a&gt; identifiers are described as &lt;em&gt;&amp;ldquo;a name that identifies either a unique object or a unique class of objects&amp;rdquo;&lt;/em&gt;, which immediately makes me think of Python variables or similar.  But that&amp;rsquo;s not what these are, they don&amp;rsquo;t hold another value, they evaluate to themselves, which kinda confuses me.  Anyway, let&amp;rsquo;s get back in the lein repl and see what they&amp;rsquo;re all about.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;; create a keyword from a string using the keyword method
user=&amp;gt; (keyword &amp;quot;blues&amp;quot;)
:blues
; check what type it is
user=&amp;gt; (type :blues)
clojure.lang.Keyword
; so far I&#39;ve mostly seen keywords used as the key in
; maps, Clojure&#39;s key/value data structure
user=&amp;gt; {:a 1 :b 2 :c 3}
{:a 1, :b 2, :c 3}
user=&amp;gt; (type {:a 1 :b 2 :c 3})
clojure.lang.PersistentArrayMap
; and as the docs say we can use the keyword to get the relevant
; value from the map
user=&amp;gt; (:b {:a 1 :b 2 :c 3})
2
user=&amp;gt; (:b {:a 1 :b {:a 1 :b 2 :c 3}})
{:a 1, :b 2, :c 3}
user=&amp;gt; (:b (:b {:a 1 :b {:a 1 :b 2 :c 3}}))
2
; we can also use keywords as the values in a map
user=&amp;gt; {:a :1 :b :2}
{:a :1, :b :2}
user=&amp;gt; (:a {:a :1 :b :2})
:1
; we can use strings in place of keywords in a map
user=&amp;gt; {&amp;quot;a&amp;quot; 1 &amp;quot;b&amp;quot; 2}
{&amp;quot;a&amp;quot; 1, &amp;quot;b&amp;quot; 2}
user=&amp;gt; (type {&amp;quot;a&amp;quot; 1 &amp;quot;b&amp;quot; 2})
clojure.lang.PersistentArrayMap
user=&amp;gt; (&amp;quot;a&amp;quot; {&amp;quot;a&amp;quot; 1 &amp;quot;b&amp;quot; 2})
ClassCastException java.lang.String cannot be cast to clojure.lang.IFn  user/eval16637 (form-init7909990402899556571.clj:1)

user=&amp;gt; (get {&amp;quot;a&amp;quot; 1 &amp;quot;b&amp;quot; 2} &amp;quot;a&amp;quot;)
1
; though we have to use get here, and it&#39;s a bit uglier.
; I also get the impression it&#39;s just common expectation to use keywords
; for map keys, and that frowning will occur if we use strings.
;
; we can also define keywords with the colon
user=&amp;gt; :blues
:blues
; and using a double colon also defines the namespace
user=&amp;gt; ::blues
:user/blues
user=&amp;gt; (type ::blues)
clojure.lang.Keyword
; which is similar to this
user=&amp;gt; (keyword &amp;quot;blues&amp;quot; &amp;quot;Mississippi-Fred-McDowell&amp;quot;)
:blues/Mississippi-Fred-McDowell
user=&amp;gt; (type :blues/Mississippi-Fred-McDowell)
clojure.lang.Keyword
; though I don&#39;t think you can define the name of the namespace using
; the double colon method, and to be honest I don&#39;t yet know why you would
; do this I thought maybe it would have something to do with referencing a value
; in a different namespace, but I really don&#39;t understand this yet, I need
; to actually start building stuff in Clojure. Understanding is a constant
; cycle of learning and building and learning and building.
;
; I tried this....
user=&amp;gt; {:a 1 :b 2 :c 3}
{:a 1, :b 2, :c 3}
user=&amp;gt; (ns notuser)
nil
notuser=&amp;gt; :a
:a
notuser=&amp;gt; user/:a

CompilerException java.lang.RuntimeException: No such var: user/:a, compiling:(/tmp/form-init7909990402899556571.clj:1:6084)
notuser=&amp;gt; user/:b

CompilerException java.lang.RuntimeException: No such var: user/:b, compiling:(/tmp/form-init7909990402899556571.clj:1:6084)
notuser=&amp;gt; (ns user)
nil
user=&amp;gt; {::a 1 ::b 2 ::c 3}
{:user/a 1, :user/b 2, :user/c 3}
user=&amp;gt; (ns notuser)
nil
notuser=&amp;gt; :a
:a
notuser=&amp;gt; user/:a
CompilerException java.lang.RuntimeException: No such var: user/:a, compiling:(/tmp/form-init7909990402899556571.clj:1:6084)

notuser=&amp;gt; :user/a
:user/a
; but of course I then realised that this is just daft, because....
notuser=&amp;gt; (ns user)
nil
user=&amp;gt; :a
:a
; so many moments of stupidity along the path to enlightenment!
; Anyway just to reiterate, I don&#39;t quite get the why of all this yet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Symbols appear to be easily confused with Keywords in Clojure.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;Symbols are identifiers that are normally used to refer to something else. They can be used in program forms to refer to function parameters, let bindings, class names and global vars. They have names and optional namespaces, both of which are strings. Symbols can have metadata (see with-meta).
Symbols, just like Keywords, implement IFn for invoke() of one argument (a map) with an optional second argument (a default value). For example (&amp;lsquo;mysym my-hash-map :none) means the same as (get my-hash-map &amp;lsquo;mysym :none).&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user=&amp;gt; (doc symbol)
-------------------------
clojure.core/symbol
([name] [ns name])
Returns a Symbol with the given namespace and name.

user=&amp;gt; (symbol foo)

CompilerException java.lang.RuntimeException: Unable to resolve symbol: foo in this context, compiling:(/tmp/form-init7909990402899556571.clj:1:1)
user=&amp;gt; (symbol &#39;foo)
foo
user=&amp;gt; (type (symbol &#39;foo))
clojure.lang.Symbol
user=&amp;gt; (symbol &amp;quot;foo&amp;quot;)
foo
; keywords cannot be converted to symbols
user=&amp;gt; (symbol :foo)

ClassCastException clojure.lang.Keyword cannot be cast to java.lang.String  clojure.core/symbol (core.clj:552)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can do some similar things with Symbols as we can with Keywords.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user=&amp;gt; {&#39;a 1 &#39;b 2 &#39;c 3}
{a 1, b 2, c 3}
user=&amp;gt; (type {&#39;a 1 &#39;b 2 &#39;c 3})
clojure.lang.PersistentArrayMap
user=&amp;gt; (type &#39;a)
clojure.lang.Symbol
user=&amp;gt; (&#39;a {&#39;a 1 &#39;b 2})
1
; but we can assign other values to Symbols, where we can&#39;t with Keywords.
; This comes back to the description of Keywords as
; &amp;quot;symbolic identifiers that evaluate to themselves&amp;quot;
user=&amp;gt; (eval :blues)
:blues
; evaluates to itself
user=&amp;gt; (eval blues)
CompilerException java.lang.RuntimeException: Unable to resolve symbol: blues in this context, compiling:(/tmp/form-init7909990402899556571.clj:1:1)

; we have to assign something to blues
user=&amp;gt; (def blues &amp;quot;Muddy Waters&amp;quot;)
#&#39;user/blues
user=&amp;gt; (eval blues)
&amp;quot;Muddy Waters&amp;quot;
user=&amp;gt; blues
&amp;quot;Muddy Waters&amp;quot;
user=&amp;gt; (type blues)
java.lang.String
; yet we are unable to assign anything else to a keyword
user=&amp;gt; (def :blues &amp;quot;Muddy Waters&amp;quot;)

CompilerException java.lang.RuntimeException: First argument to def must be a Symbol, compiling:(/tmp/form-init7909990402899556571.clj:1:1)
; Now I thought we could assign a value to a symbol, buuuuut...
user=&amp;gt; (def &#39;blues &amp;quot;Muddy Waters&amp;quot;)
CompilerException java.lang.RuntimeException: First argument to def must be a Symbol, compiling:(/tmp/form-init7909990402899556571.clj:1:1)
user=&amp;gt; (defn &#39;blues [a] (str a &amp;quot; got the blues&amp;quot;))

IllegalArgumentException First argument to defn must be a symbol  clojure.core/defn--4156 (core.clj:281)
user=&amp;gt; (defn blues [a] (str a &amp;quot; got the blues&amp;quot;))
#&#39;user/blues
user=&amp;gt; (blues &amp;quot;Muddy Waters&amp;quot;)
&amp;quot;Muddy Waters got the blues&amp;quot;
user=&amp;gt; &#39;blues
blues
; So when assigning a value to a Symbol you don&#39;t use the quote.
user=&amp;gt; (symbol? &#39;blues)
true
user=&amp;gt; (symbol? (quote blues))
true
user=&amp;gt; (def blues &amp;quot;Muddy Waters&amp;quot;)
#&#39;user/blues
user=&amp;gt; (symbol? blues)
false
user=&amp;gt; (symbol? &#39;blues)
true
; Here blues is false as it refers to the string &amp;quot;Muddy Waters&amp;quot;, whereas
; &#39;blues is the symbol
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keywords and Symbols are not the same thing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user=&amp;gt; (keyword? &#39;blues)
false
user=&amp;gt; (keyword? :blues)
true
user=&amp;gt; (symbol? :blues)
false
user=&amp;gt; (symbol? &#39;blues)
true
user=&amp;gt; (:a {&#39;a 1 &#39;b 2})
nil
; as keywords refer to themselves they are identical, whereas symbols are not
user=&amp;gt; (identical? :a :a)
true
user=&amp;gt; (identical? &#39;a &#39;a)
false
; even though
user=&amp;gt; (= :a :a)
true
user=&amp;gt; (= &#39;a &#39;a)
true
; which, like above, has to do with the difference between the thing itself
; and what the thing is referencing.
; Here is an example of this difference
user=&amp;gt; (def blues [&amp;quot;Blind Willie Johnson&amp;quot; &amp;quot;Muddy Waters&amp;quot; &amp;quot;Sister Gertrude Morgan&amp;quot;])
#&#39;user/blues
user=&amp;gt; blues
[&amp;quot;Blind Willie Johnson&amp;quot; &amp;quot;Muddy Waters&amp;quot; &amp;quot;Sister Gertrude Morgan&amp;quot;]
user=&amp;gt; (type blues)
clojure.lang.PersistentVector
user=&amp;gt; &#39;blues
blues
user=&amp;gt; (type &#39;blues)
clojure.lang.Symbol
; yet the Symbol refers to the underlying list, not to itself, so if we
; reference the symbol we will always get back what it refers to
user=&amp;gt; (eval &#39;blues)
[&amp;quot;Blind Willie Johnson&amp;quot; &amp;quot;Muddy Waters&amp;quot; &amp;quot;Sister Gertrude Morgan&amp;quot;]
user=&amp;gt; (eval blues)
[&amp;quot;Blind Willie Johnson&amp;quot; &amp;quot;Muddy Waters&amp;quot; &amp;quot;Sister Gertrude Morgan&amp;quot;]
user=&amp;gt; (first &#39;[&amp;quot;Blind Willie Johnson&amp;quot; &amp;quot;Muddy Waters&amp;quot; &amp;quot;Sister Gertrude Morgan&amp;quot;])
&amp;quot;Blind Willie Johnson&amp;quot;
user=&amp;gt; (first blues)
&amp;quot;Blind Willie Johnson&amp;quot;
user=&amp;gt; (type &#39;[&amp;quot;Blind Willie Johnson&amp;quot; &amp;quot;Muddy Waters&amp;quot; &amp;quot;Sister Gertrude Morgan&amp;quot;])
clojure.lang.PersistentVector
user=&amp;gt; (type blues)
clojure.lang.PersistentVector
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keywords and Symbols can also be used within Vectors&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user=&amp;gt; [1 2 3]
[1 2 3]
user=&amp;gt; (type [1 2 3])
clojure.lang.PersistentVector
user=&amp;gt; [1 &amp;quot;one&amp;quot; &amp;quot;two&amp;quot; 3]
[1 &amp;quot;one&amp;quot; &amp;quot;two&amp;quot; 3]
user=&amp;gt; [1 :one :two 3]
[1 :one :two 3]
user=&amp;gt; [1 :one :two &#39;three 3]
[1 :one :two three 3]
user=&amp;gt; (first (rest [1 :one :two &#39;three 3]))
:one
user=&amp;gt; [&#39;one 1 :one :two &#39;three 3]
[one 1 :one :two three 3]
user=&amp;gt; (first [&#39;one 1 :one :two &#39;three 3])
one
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also discovered that &lt;code&gt;&#39;&lt;/code&gt; &amp;amp; &lt;code&gt;&amp;quot;&lt;/code&gt; are not interchangeable as they are in other languages, due to the use of &lt;code&gt;&#39;&lt;/code&gt; to define Symbols and Lists.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user=&amp;gt; &amp;quot;blues&amp;quot;
&amp;quot;blues&amp;quot;
user=&amp;gt; (type &amp;quot;blues&amp;quot;)
java.lang.String
user=&amp;gt; &#39;blues&#39;
blues&#39;
user=&amp;gt; (type &#39;blues&#39;)
clojure.lang.Symbol
user=&amp;gt; (str &#39;blues&#39;)
&amp;quot;blues&#39;&amp;quot;
user=&amp;gt; (str &amp;quot;blues&amp;quot;)
&amp;quot;blues&amp;quot;
user=&amp;gt; &amp;quot;:blues&amp;quot;
&amp;quot;:blues&amp;quot;
user=&amp;gt; (type &amp;quot;:blues&amp;quot;)
java.lang.String
user=&amp;gt; (type &#39;:blues&#39;)
clojure.lang.Keyword
user=&amp;gt; &#39;:blues&#39;
:blues&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The confusion is all mine, any insight is borrowed heavily from the following articles.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/1527548/why-does-clojure-have-keywords-in-addition-to-symbols?rq=1&#34;&gt;Why does Clojure have “keywords” in addition to “symbols”?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://clojuredocs.org/clojure.core/symbol&#34;&gt;ClojureDocs - Symbol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://clojuredocs.org/clojure.core/keyword&#34;&gt;ClojureDocs - Keyword&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.braveclojure.com/do-things/#2_10__Quoting&#34;&gt;Clojure For The Brave and True - Quoting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.braveclojure.com/do-things/#2_5__Keywords&#34;&gt;Clojure For The Brave and True - Keywords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.braveclojure.com/do-things/#2_9__Symbols_and_Naming&#34;&gt;Clojure For The Brave and True - Symbols &amp;amp; Naming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/2320348/symbols-in-clojure&#34;&gt;Symbols in Clojure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Lonnie Johnson: Away Down In The Alley Blues</title>
      <link>/post/2015-09-16-lonnie-johnson-away-down-in-the-alley-blues/</link>
      <pubDate>Wed, 16 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-09-16-lonnie-johnson-away-down-in-the-alley-blues/</guid>
      <description>&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/n4Ket08gies&#34;frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Notes on Django: Population Script</title>
      <link>/post/2015-09-16-notes-on-django-population-script/</link>
      <pubDate>Wed, 16 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-09-16-notes-on-django-population-script/</guid>
      <description>&lt;p&gt;After my last Django post I happened across &lt;a href=&#34;http://www.tangowithdjango.com/book/chapters/models.html#creating-a-population-script&#34;&gt;this population script&lt;/a&gt; from &lt;a href=&#34;http://www.tangowithdjango.com/&#34;&gt;Tango with Django&lt;/a&gt;.  So I&amp;rsquo;ve updated it and adapted it to my own needs.  Ha, Screw You &lt;a href=&#34;http://www.discoposse.com/index.php/2014/11/09/pay-yourself-first-the-art-of-reducing-technical-debt/&#34;&gt;Technical Debt!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;example models.py&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Genre(models.Model):
    name = models.CharField()


class Musician(models.Model):
    genre = models.ManyToManyField(Genre)  # Note the m2m field
    name = models.CharField()
    bio = models.TextField()
    alive = models.BooleanField()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;example populate.py&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os


def populate():

    print &#39;Populating Database...&#39;
    print &#39;----------------------\n&#39;

    username = &#39;uname&#39;
    email = &#39;uname@domain.com&#39;
    password = &#39;secret&#39;

    blues = add_genre(&#39;Blues&#39;)
    jazz = add_genre(&#39;Jazz&#39;)

    add_musician(&#39;Billie Holiday&#39;,
                &#39;Eleanora Fagan, professionally known as Billie Holiday, was \
                an American jazz musician and singer-songwriter. Nicknamed \
                &amp;quot;Lady Day&amp;quot; by her friend and music partner Lester Young, \
                Holiday had a seminal influence on jazz music and pop singing. \
                Her vocal style, strongly inspired by jazz instrumentalists, \
                pioneered a new way of manipulating phrasing and tempo.&#39;,
                False,
                blues, jazz)

    add_musician(&#39;Big Mama Thornton&#39;,
                &amp;quot;Willie Mae &#39;Big Mama&#39; Thornton was an American rhythm and \
                blues singer and songwriter. She was the first to record \
                Leiber and Stoller&#39;s &#39;Hound Dog&#39; in 1952, which became her \
                biggest hit. It spent seven weeks at number one on the \
                Billboard R&amp;amp;B charts in 1953 and sold almost two million \
                copies. However, her success was overshadowed three years \
                later, when Elvis Presley recorded his more popular rendition \
                of &#39;Hound Dog&#39;. Similarly, Thornton&#39;s &#39;Ball &#39;n&#39; Chain&#39; had a \
                bigger impact when performed and recorded by Janis Joplin in \
                the late 1960s.&amp;quot;,
                False,
                blues)

    add_musician(&#39;Ella Fitzgerald&#39;,
                &#39;Ella Jane Fitzgerald was an American jazz singer often \
                referred to as the First Lady of Song, Queen of Jazz and \
                Lady Ella. She was noted for her purity of tone, impeccable \
                diction, phrasing and intonation, and a &amp;quot;horn-like&amp;quot; \
                improvisational ability, particularly in her scat singing.&#39;,
                False,
                jazz)


    create_super_user(username, email, password)

    print &#39;\nCurrently Populated:&#39;
    print &#39;--------------------\n&#39;

    for m in Musician.objects.all():
        for g in Genre.objects.filter(musician__name__startswith=m):
            print &#39;- {0}: {1}&#39;.format(str(m), str(g))

    print &#39;\nSuperUser:&#39;, User.objects.get(is_superuser=True).username
    print &#39;\n&#39; + (&#39;=&#39; * 80) + &#39;\n&#39;


def add_genre(name):
    g, created = Genre.objects.get_or_create(name=name)
    &#39;&#39;&#39;
    get_or_create returns a tuple of (object, created), where
    the object is the db entry and created is a Boolean referring
    to whether the object was just created or not.  So, if nothing&#39;s
    gone wrong False will indicate the object already exists
    &#39;&#39;&#39;
    print &#39;- Genre: {0}, Created: {1}&#39;.format(str(g), str(created))
    return g


def add_musician(name, bio, alive, *genre):
    m, created = Musician.objects.get_or_create(name=name,
                                                bio=bio,
                                                alive=alive)
    m.genre.add(*genre)
    print &#39;- Musician: {0}, Created: {1}&#39;.format(str(m), str(created))
    return m


def create_super_user(username, email, password):
    &#39;&#39;&#39;
    for some reason get_or_create didn&#39;t work with creating the
    SuperUser so here is a try/except, with an IntegrityError
    raised if the SuperUser already exists
    &#39;&#39;&#39;
    try:
        u = User.objects.create_superuser(username, email, password)
        return u
    except IntegrityError:
        pass

if __name__ == &#39;__main__&#39;:
    print &#39;\n&#39; + (&#39;=&#39; * 80) + &#39;\n&#39;
    import django
    os.environ.setdefault(&#39;DJANGO_SETTINGS_MODULE&#39;,
                          &#39;Project.settings&#39;)
    django.setup()
    from app.models import Genre, Musician
    from django.contrib.auth.models import User
    from django.db import IntegrityError
    populate()  # Call the populate function, which calls the
                # add_genre and add_musician functions

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in our root project directory, where &lt;code&gt;manage.py&lt;/code&gt; is, we run our script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vagrant@django:~/shared/ProjectRootDirectory$ python populate.py
================================================================================

Populating Database...
----------------------

- Genre: Blues, Created: True
- Genre: Jazz, Created: True
- Musician: Billie Holiday, Created: True
- Musician: Big Mama Thornton, Created: True
- Musician: Ella Fitzgerald, Created: True

Currently Populated:
--------------------

- Billie Holiday: Jazz
- Billie Holiday: Blues
- Big Mama Thornton: Blues
- Ella Fitzgerald: Jazz

SuperUser: uname

================================================================================
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, buggering about with models and the database just got easier, now that it takes minutes to destroy it and rebuild it. Super.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Notes on Clojure: Dipping My Toes In</title>
      <link>/post/2015-09-04-clojure-dipping-toes/</link>
      <pubDate>Fri, 04 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-09-04-clojure-dipping-toes/</guid>
      <description>&lt;p&gt;Maybe because I&amp;rsquo;m such a late arrival to this programming pastime, I feel a certain inadequacy, a need to over compensate.  Or maybe I just find it exciting learning new things, and I just want to get deeper and consume everything.  Anyway, I&amp;rsquo;ve been getting more interested in functional programming, I don&amp;rsquo;t know why.  I&amp;rsquo;m not so embedded in object-oriented, and I&amp;rsquo;ve been trying to understand JavaScript&amp;rsquo;s prototype-based programming, and if I&amp;rsquo;m honest, these concepts aren&amp;rsquo;t yet meaningful enough to me to matter so much outside of syntax and the practicalities of how to write code, yet functional programming seems to make a certain amount of sense. Perhaps this will become an endeavour in proving myself wrong. So, I listened to &lt;a href=&#34;https://twitter.com/gigasquid&#34;&gt;Carin Meier&lt;/a&gt; on &lt;a href=&#34;https://changelog.com/171/&#34;&gt;The Changelog&lt;/a&gt; and bought &lt;a href=&#34;http://www.amazon.co.uk/Living-Clojure-Carin-Meier/dp/1491909048/ref=sr_1_1?ie=UTF8&amp;amp;qid=1441319254&amp;amp;sr=8-1&amp;amp;keywords=living+clojure&#34;&gt;her book&lt;/a&gt;, and am going to start learning Clojure.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://leiningen.org/&#34;&gt;Leiningen&lt;/a&gt; is the tool Carin recommends for getting started with Clojure, so let&amp;rsquo;s install that.
Check Java is installed first:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ java -version
java version &amp;quot;1.7.0_80&amp;quot;
Java(TM) SE Runtime Environment (build 1.7.0_80-b15)
Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Initially I used my package manager to install Leiningen, but this installed an old version.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get update
$ sudo apt-get leiningen
$ lein -v
Leiningen 1.7.1 on Java 1.7.0_80 Java HotSpot(TM) 64-Bit Server VM
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, I uninstalled that, and followed the instructions on the Leiningen site.  Copy and Paste the contents of the &lt;a href=&#34;https://github.com/technomancy/leiningen/blob/stable/bin/lein&#34;&gt;lein&lt;/a&gt; file, into a file called &lt;code&gt;lein&lt;/code&gt;.  Move the file into my &lt;code&gt;$PATH&lt;/code&gt;, and make it executable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get remove leiningen # remove apt-get installed lein
$ vim ~/lein # copy and paste the contents of the lein file
$ echo $PATH # check path
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
:/usr/lib/jvm/java-7-oracle/bin:/usr/lib/jvm/java-7-oracle/db/bin:/usr/lib/jvm/java-7-or
acle/jre/bin:/usr/lib/jvm/java-7-oracle/bin:/usr/lib/jvm/java-7-oracle/db/bin:/usr/lib/j
vm/java-7-oracle/jre/bin
$ mv ~/lein /usr/bin/lein # move the lein file into my $PATH
$ chmod a+x /usr/bin/lein # make it executable
$ lein # aaaaaand run it!
 Downloading Leiningen to /home/willem/.lein/self-installs/leiningen-2.5.2-standalone.jar now...                                                                       [1050/1997]
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   406    0   406    0     0    653      0 --:--:-- --:--:-- --:--:--   652
100 15.0M  100 15.0M    0     0  4160k      0  0:00:03  0:00:03 --:--:-- 6334k
Leiningen is a tool for working with Clojure projects.

Several tasks are available:
change              Rewrite project.clj by applying a function.
check               Check syntax and warn on reflection.
classpath           Print the classpath of the current project.
clean               Remove all files from project&#39;s target-path.
compile             Compile Clojure source into .class files.
deploy              Build and deploy jar to remote repository.
deps                Download all dependencies.
do                  Higher-order task to perform other tasks in succession.
help                Display a list of tasks or help for a given task.
install             Install the current project to the local repository.
jar                 Package up all the project&#39;s files into a jar file.
javac               Compile Java source files.
new                 Generate project scaffolding based on a template.
plugin              DEPRECATED. Please use the :user profile instead.
pom                 Write a pom.xml file to disk for Maven interoperability.
release             Perform :release-tasks.
repl                Start a repl session either with the current project or standalone.
retest              Run only the test namespaces which failed last time around.
run                 Run a -main function with optional command-line arguments.
search              Search remote maven repositories for matching jars.
show-profiles       List all available profiles or display one if given an argument.
test                Run the project&#39;s tests.
trampoline          Run a task without nesting the project&#39;s JVM inside Leiningen&#39;s.
uberjar             Package up the project files and dependencies into a jar file.
update-in           Perform arbitrary transformations on your project map.
upgrade             Upgrade Leiningen to specified version or latest stable.
vcs                 Interact with the version control system.
version             Print version for Leiningen and the current JVM.
with-profile        Apply the given task with the profile(s) specified.

Run `lein help $TASK` for details.

Global Options:
  -o             Run a task offline.
  -U             Run a task after forcing update of snapshots.
  -h, --help     Print this help or help for a specific task.
  -v, --version  Print Leiningen&#39;s version.

See also: readme, faq, tutorial, news, sample, profiles, deploying, gpg,
mixed-source, templates, and copying.

$
$ lein -v # check the version again, 2.5.2 &amp;gt; 1.7.1, super.
Leiningen 2.5.2 on Java 1.7.0_80 Java HotSpot(TM) 64-Bit Server VM
$
$ lein repl # Fire up the REPL, first time this did some more stuff, see below
            # but subsequent times it didn&#39;t, no worries.
Retrieving org/clojure/tools.nrepl/0.2.10/tools.nrepl-0.2.10.pom from central
Retrieving org/clojure/pom.contrib/0.1.2/pom.contrib-0.1.2.pom from central
Retrieving org/sonatype/oss/oss-parent/7/oss-parent-7.pom from central
Retrieving clojure-complete/clojure-complete/0.2.3/clojure-complete-0.2.3.pom from clojars
Retrieving org/clojure/clojure/1.7.0/clojure-1.7.0.pom from central
Retrieving org/clojure/clojure/1.7.0/clojure-1.7.0.jar from central
Retrieving org/clojure/tools.nrepl/0.2.10/tools.nrepl-0.2.10.jar from central
Retrieving clojure-complete/clojure-complete/0.2.3/clojure-complete-0.2.3.jar from clojars
nREPL server started on port 33732 on host 127.0.0.1 - nrepl://127.0.0.1:33732
REPL-y 0.3.7, nREPL 0.2.10
Clojure 1.7.0
Java HotSpot(TM) 64-Bit Server VM 1.7.0_80-b15
   Docs: (doc function-name-here)
         (find-doc &amp;quot;part-of-name-here&amp;quot;)
 Source: (source function-name-here)
Javadoc: (javadoc java-object-or-class-here)
   Exit: Control+D or (exit) or (quit)
Results: Stored in vars *1, *2, *3, an exception in *e

user=&amp;gt;
user=&amp;gt; quit
Bye for now!
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the following is basically just me following along with Carin&amp;rsquo;s book, where she starts to introduce Clojure.  So all credit goes to her, I&amp;rsquo;m just a messenger.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ lein new wonderland # start a new Clojure project
Generating a project called wonderland based on the &#39;default&#39; template.
The default template is intended for library projects, not applications.
To see other templates (app, plugin, etc), try `lein help new`.
$ cd wonderland/ # change into it
/wonderland$ lein repl # and get the REPL going again
nREPL server started on port 50609 on host 127.0.0.1 - nrepl://127.0.0.1:50609
REPL-y 0.3.7, nREPL 0.2.10
Clojure 1.7.0
Java HotSpot(TM) 64-Bit Server VM 1.7.0_80-b15
    Docs: (doc function-name-here)
          (find-doc &amp;quot;part-of-name-here&amp;quot;)
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)
 Results: Stored in vars *1, *2, *3, an exception in *e

user=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;g
; Some basic number stuff. Clojure is littered with parenthesis, you get used to
; it.  Clojure structures things differently to what I&amp;rsquo;m used to.  The operator
; goes first, then the parameters it takes.  I really quite like this, it&amp;rsquo;s a
; nice way of organising things, though I can see it might annoy some people.
user=&amp;gt; (+ 1 1)
2
user=&amp;gt; 42
42
user=&amp;gt; &lt;sup&gt;6&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;  ; Clojure will reduce a ratio if it can.
            ; This is different to division
2
user=&amp;gt; &lt;sup&gt;8&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;  ; And won&amp;rsquo;t if it can&amp;rsquo;t, but will leave it as a ratio, rather than
            ; change it to a decimal
&lt;sup&gt;8&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;
user=&amp;gt; 6.0/3 ; you can&amp;rsquo;t use decimals in a ratio.
NumberFormatException Invalid number: 6.0/3  clojure.lang.LispReader.readNumber (LispReader.java:330)&lt;/p&gt;

&lt;p&gt;user=&amp;gt; &lt;sup&gt;6&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;.0
NumberFormatException Invalid number: &lt;sup&gt;6&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;.0  clojure.lang.LispReader.readNumber (LispReader.java:330)&lt;/p&gt;

&lt;p&gt;user=&amp;gt; 6.0/3.0&lt;/p&gt;

&lt;p&gt;NumberFormatException Invalid number: 6.0/3.0  clojure.lang.LispReader.readNumber (LispReader.java:330)
user=&amp;gt; (/ 6 3)
2
user=&amp;gt; (/ 3 6) ; Dividing whole numbers will result in a ratio
&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;
user=&amp;gt; (/ 3.0 6.0) ; To get a decimal result, use a decimal in the equation
0.5
user=&amp;gt; (/ 3.0 6)
0.5
user=&amp;gt; &amp;ldquo;blues&amp;rdquo; ; yep, that&amp;rsquo;s a string
&amp;ldquo;blues&amp;rdquo;
user=&amp;gt; blues
CompilerException java.lang.RuntimeException: Unable to resolve symbol: blues in this context, compiling:(/tmp/form-init7599042722842248080.clj:1:1010)&lt;/p&gt;

&lt;p&gt;user=&amp;gt; true ; Ain&amp;rsquo;t nothing going on but a boolean, yo.
true
user=&amp;gt; nil ; nil is the absence of a value, like None in Python
nil
user=&amp;gt; (+ 5 (- 4 2)) ; Here&amp;rsquo;s the beginning of the growth of the parens
7
user=&amp;gt; &amp;lsquo;(5 &amp;ldquo;blues&amp;rdquo; :music) ; A list is denoted with a &amp;lsquo;
(5 &amp;ldquo;blues&amp;rdquo; :music)
user=&amp;gt; (first &amp;lsquo;(5, &amp;ldquo;blues&amp;rdquo;, :music)) ; first gives us the first list item
5
user=&amp;gt; (rest &amp;lsquo;(5, &amp;ldquo;blues&amp;rdquo;, :music)) ; and rest, the rest
(&amp;ldquo;blues&amp;rdquo; :music)
user=&amp;gt; (first (rest &amp;lsquo;(5, &amp;ldquo;blues&amp;rdquo;, :music))) ; we can nest these fuctions
&amp;ldquo;blues&amp;rdquo;
user=&amp;gt; (cons &amp;ldquo;down&amp;rdquo; &amp;lsquo;(5, &amp;ldquo;blues&amp;rdquo;, :music)) ; and use cons to add to our list
(&amp;ldquo;down&amp;rdquo; 5 &amp;ldquo;blues&amp;rdquo; :music)
user=&amp;gt; (cons &amp;ldquo;down&amp;rdquo; (cons 7 &amp;lsquo;(5, &amp;ldquo;blues&amp;rdquo;, :music))) ; and nest our cons
(&amp;ldquo;down&amp;rdquo; 7 5 &amp;ldquo;blues&amp;rdquo; :music)
```&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s as far as I got last night. I know it&amp;rsquo;s not far, but having kids makes me tired.  And I just want to reiterate again, this is basically just regurgitating Carin&amp;rsquo;s work, go &lt;a href=&#34;http://www.amazon.co.uk/Living-Clojure-Carin-Meier/dp/1491909048/ref=sr_1_1?ie=UTF8&amp;amp;qid=1441319254&amp;amp;sr=8-1&amp;amp;keywords=living+clojure&#34;&gt;buy her book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Interestingly, the name &lt;em&gt;Leiningen&lt;/em&gt; comes from the short story &lt;a href=&#34;http://www.classicshorts.com/stories/lvta.html&#34;&gt;Leiningen versus the Ants&lt;/a&gt;.  A tale of plantation owner Leiningen&amp;rsquo;s battle against an invading army of flesh-eating ants.  It&amp;rsquo;s a really good read, triumph over adversity, the importance of intelligence and resourcefulness, I highly recommend you &lt;a href=&#34;http://www.classicshorts.com/stories/lvta.html&#34;&gt;read&lt;/a&gt; it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Notes on Django: Setting Up</title>
      <link>/post/2015-09-03-notes-on-django-setting-up/</link>
      <pubDate>Thu, 03 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-09-03-notes-on-django-setting-up/</guid>
      <description>&lt;p&gt;I&amp;rsquo;m starting to develop multiple Django projects, but am still referring to the &lt;em&gt;(excellent)&lt;/em&gt; &lt;a href=&#34;https://docs.djangoproject.com/en/1.8/intro/tutorial01/&#34;&gt;Django tutorial&lt;/a&gt; to get set up, so I thought I&amp;rsquo;d write out the steps I take to set up a new Django project and it&amp;rsquo;s associated development environment, just to help remember it and have an easy reference for the future.&lt;/p&gt;

&lt;p&gt;I work on my Django projects within a &lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt; environment.  This creates a nice, easy-to-use, isolated environment that is simple to bring up, tear down and replicate.  It also means I, controversially, don&amp;rsquo;t use &lt;a href=&#34;https://virtualenv.pypa.io/en/latest/&#34;&gt;virtualenv&lt;/a&gt;, as Vagrant isolates things for me.  Though I admit, I&amp;rsquo;m still an amateur and am probably overlooking something important, especially as nothing I&amp;rsquo;ve made has yet made it into production.  To be honest I&amp;rsquo;d really like to move everything to &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; but I haven&amp;rsquo;t yet had the time to properly learn Docker or explore the feasability of this.  One of the nice things about Vagrant is that I have a separate VM for my PostgreSQL database.  So, because I&amp;rsquo;m still learning Postgres, and run into migration problems when changing models, it is easy to just destroy and rebuild my database backend quickly.  This does however destroy any data I have, which currently isn&amp;rsquo;t a big problem.  I want to put aside some time in my workflow for creating a script that populates the database with some basic data for development.  But I really need to spend some time learning how to properly deal with the database and migrations, of course.&lt;/p&gt;

&lt;p&gt;My Vagrant setup can be found on my &lt;a href=&#34;https://github.com/bordeltabernacle/Vagrant-Django-PostgreSQL&#34;&gt;Github&lt;/a&gt;, and consists of a Vagrantfile, a couple of bash scripts to provision each machine, and a shared folder that contains a pip requirements file, and will go on to contain my Django project&amp;rsquo;s root folder.  This means I can work on my Django project files on my laptop rather than in the VM.  I have a private &lt;a href=&#34;https://about.gitlab.com/downloads/&#34;&gt;GitLab&lt;/a&gt; server that I use to house all my project repositories, with my root git folder containing the Vagrant setup and this shared folder.&lt;/p&gt;

&lt;p&gt;This is my Vagrantfile:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

# These are the ip &amp;amp; port variables that can be changed on a per-project basis
vagrant_root = File.dirname(__FILE__)
django_8000_fp = &amp;quot;8011&amp;quot;
django_80_fp = &amp;quot;8091&amp;quot;
db_8000_fp = &amp;quot;8012&amp;quot;
db_80_fp = &amp;quot;8092&amp;quot;
db_postgres_fp = &amp;quot;25432&amp;quot;
django_private_ip = &amp;quot;10.101.9.101&amp;quot;
db_private_ip = &amp;quot;10.101.9.102&amp;quot;

Vagrant.configure(2) do |config|

    config.vm.box = &amp;quot;ubuntu/trusty64&amp;quot;
    config.vm.box_url = &amp;quot;https://atlas.hashicorp.com/ubuntu/boxes/trusty64&amp;quot;
    config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
        vb.memory = &amp;quot;1024&amp;quot;
        vb.cpus = &amp;quot;1&amp;quot;
        vb.gui = false  # I sometimes run into problems getting the environment
                        # set up that are fixed by &#39;turning on&#39; the Virtualbox
                        # screen for the VM, by changing this to true
    end

    if Vagrant.has_plugin?(&amp;quot;vagrant-hostmanager&amp;quot;)
        # this is a great Vagrant plugin that takes care of the VM /etc/hosts
        # files
        config.hostmanager.enabled = true
        config.hostmanager.manage_host = true
        config.hostmanager.ignore_private_ip = false
        config.hostmanager.include_offline = true
    end

    # The following sets up two machines, one called django, the other called db.
    # They both currently have both a NAT network and a private network, which
    # I think is unneccessary, I initially did it so the dev machine would have
    # an ip address from the staging server subnet to make setting it up there
    # easier.  This has created a problem for me in the past when pushing changes
    # to my Gitlab repos, as the Vagrant machine set up a route to the /16
    # subnet which included my Gitlab server, so I would have to shut down my
    # Vagrant machines and delete the route from my routing table to be able to
    # push commits to my remote repo. Ugh.
    config.vm.define &amp;quot;django&amp;quot; do |django|
        django.vm.hostname = &amp;quot;django&amp;quot;
        django.vm.network &amp;quot;private_network&amp;quot;, ip: django_private_ip, :netmask =&amp;gt; &amp;quot;255.255.0.0&amp;quot;
        django.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 8000, host: django_8000_fp
        django.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 80, host: django_80_fp
        django.vm.synced_folder &amp;quot;#{vagrant_root}/shared&amp;quot;, &amp;quot;/home/vagrant/shared&amp;quot;
        # set up the shared folder in the shared directory within the current
        # directory
        django.vm.provision :shell, :path =&amp;gt; &amp;quot;#{vagrant_root}/provision/djangonode-setup.sh&amp;quot;
        # initiate the provisioning bash script.
    end

    config.vm.define &amp;quot;db&amp;quot; do |db|
        db.vm.hostname = &amp;quot;db&amp;quot;
        db.vm.network &amp;quot;private_network&amp;quot;, ip: db_private_ip, :netmask =&amp;gt; &amp;quot;255.255.0.0&amp;quot;
        db.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 8000, host: db_8000_fp
        db.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 80, host: db_80_fp
        db.vm.network &amp;quot;forwarded_port&amp;quot;, guest: 5432, host: db_postgres_fp
        db.vm.provision :shell, :path =&amp;gt; &amp;quot;#{vagrant_root}/provision/dbnode-setup.sh&amp;quot;
    end

end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The django provision file just installs pip and runs the requirements file.  The db provision file installs Postgres and sets up the database.&lt;/p&gt;

&lt;p&gt;So, once I&amp;rsquo;ve updated any variables in this Vagrantfile and the db provision file, I&amp;rsquo;ll set up the new remote repo on my Gitlab server.  Then we unchain Django and get developing&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;laptop$ cd root-project-dir
laptop$ vagrant up
Bringing machine &#39;django&#39; up with &#39;virtualbox&#39; provider...
Bringing machine &#39;db&#39; up with &#39;virtualbox&#39; provider...
[...omitted for brevity]
laptop$
laptop$ vagrant ssh django
Welcome to Ubuntu 14.04.2 LTS (GNU/Linux 3.13.0-55-generic x86_64)

 * Documentation:  https://help.ubuntu.com/

 System information disabled due to load higher than 1.0

  Get cloud support with Ubuntu Advantage Cloud Guest:
    http://www.ubuntu.com/business/services/cloud


vagrant@django:~$ cd shared/
vagrant@django:~/shared$ django-admin startproject mysite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point I need to change the Django settings file to reflect the Postgres database setup:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;DATABASES = {
    &#39;default&#39;: {
        &#39;ENGINE&#39;: &#39;django.db.backends.postgresql_psycopg2&#39;,
        &#39;NAME&#39;: &#39;db&#39;,
        &#39;USER&#39;: &#39;django&#39;,
        &#39;PASSWORD&#39;: &#39;django&#39;,
        &#39;HOST&#39;: &#39;db&#39;,
        &#39;PORT&#39;: &#39;5432&#39;,
    }
}   # Obviously these aren&#39;t the actual names and passwords I use, duh.  Though
    # the vagrant hostmanager plugin does mean you just have to put db, the name
    # of the Postgres VM, in as the Database host name, ahhhh niiice.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Whilst in the settings file let&amp;rsquo;s update our location:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;LANGUAGE_CODE = &#39;en-gb&#39;

TIME_ZONE = &#39;Europe/London&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and create the &lt;code&gt;static&lt;/code&gt; directory for CSS, JavaScript, fonts etc. and &lt;code&gt;media&lt;/code&gt; directory for images, pdf&amp;rsquo;s and the like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;STATIC_URL = &#39;/static/&#39;
STATIC_ROOT = &#39;/home/vagrant/shared/mysite/appname/static/&#39;
MEDIA_URL = &#39;/static/media/&#39;
MEDIA_ROOT = &#39;/home/vagrant/shared/mysite/appname/static/media/&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Don&amp;rsquo;t forget to actually create these directories!
Back in the django VM:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vagrant@django:~/shared$ cd mysite
vagrant@django:~/shared/mysite$ python manage.py migrate
[...omitted for brevity]
vagrant@django:~/shared/mysite$
vagrant@django:~/shared/mysite$ python manage.py runserver 0.0.0.0:8000

Performing system checks...

System check identified no issues (0 silenced).
September 03, 2015 - 12:03:15
Django version 1.8.2, using settings &#39;mysite.settings&#39;
Starting development server at http://0.0.0.0:8000/
Quit the server with CONTROL-C.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Running the Django server at &lt;code&gt;0.0.0.0:8000&lt;/code&gt; makes the site accessible from outside the VM, on the port specified in the Vagrantfile.  So, if I used the Vagrantfile above, which contains &lt;code&gt;django_8000_fp = &amp;quot;8011&amp;quot;&lt;/code&gt; then in the browser on my laptop I would got o &lt;code&gt;http://localhost:8011&lt;/code&gt; which would bring up the Django site.&lt;/p&gt;

&lt;p&gt;If that works, go on to set up the app:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vagrant@django:~/shared/mysite$ python manage.py startapp appname
# pop your app in the INSTALLED_APPS section of the settings.py file
vagrant@django:~/shared/mysite$ python manage.py makemigrations appname
vagrant@django:~/shared/mysite$ python manage.py migrate
# might as well create the admin superuser while we&#39;re here
vagrant@django:~/shared/mysite$ python manage.py createsuperuser
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go build stuff.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Memphis Minnie: Down By The Riverside</title>
      <link>/post/2015-09-02-memphis-minnie-down-by-the-riverside/</link>
      <pubDate>Wed, 02 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-09-02-memphis-minnie-down-by-the-riverside/</guid>
      <description>&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/blBZgM4e-CY&#34; frameborder=&#34;0&#34;&gt; &lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Notes on Python: args &#39;n&#39; kwargs</title>
      <link>/post/2015-08-26-args-kwargs/</link>
      <pubDate>Wed, 26 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-08-26-args-kwargs/</guid>
      <description>&lt;p&gt;Python&amp;rsquo;s &lt;code&gt;*args&lt;/code&gt; &amp;amp; &lt;code&gt;**kwargs&lt;/code&gt; have always intimidated me for some reason.  Since I&amp;rsquo;ve been working with Django they&amp;rsquo;ve turned up more frequently, for instance, when overriding a model&amp;rsquo;s &lt;code&gt;save&lt;/code&gt; function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class myModel(models.Model):
    name = models.CharField()

    def save(self, *args, **kwargs):
        if not self.id:
            # Newly created object so set slug
            self.slug = slugify(self.name)

        super(myModel, self).save(*args, **kwargs)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And so I thought I&amp;rsquo;d get to the bottom of what they are.&lt;/p&gt;

&lt;p&gt;Basically, they allow a function to accept an indeterminate, variable number of arguments or keyword arguments.  The &lt;code&gt;args&lt;/code&gt; and &lt;code&gt;kwargs&lt;/code&gt; bits are actually not important, it&amp;rsquo;s the &lt;code&gt;*&lt;/code&gt; &amp;amp; &lt;code&gt;**&lt;/code&gt; that are, similar I guess to their use elsewhere as a wildcard symbol.  So you can just use the asterisks on their own or even &lt;code&gt;*thing&lt;/code&gt; &amp;amp; &lt;code&gt;**things&lt;/code&gt;, but don&amp;rsquo;t do that, you&amp;rsquo;ll upset people.&lt;/p&gt;

&lt;p&gt;For instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def print_singers(*args):
...     # Notice when we do something with `args` we lose the asterisk
...     for arg in args:
...         print arg
...
&amp;gt;&amp;gt;&amp;gt; print_singers(&#39;R.L. Burnside&#39;)
R.L. Burnside
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; print_singers(&#39;R.L. Burnside&#39;, &#39;Bessie Smith&#39;, &#39;Skip James&#39;, &#39;Memphis Minnie&#39;)
R.L. Burnside
Bessie Smith
Skip James
Memphis Minnie
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also include a formal parameter alongside our &lt;code&gt;*args&lt;/code&gt;.  A formal parameter just means it is mandatory, that an argument must be passed to it.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def print_singers(genre, *args):
...     print &#39;Genre: &#39; + genre
...     for arg in args:
...         print arg
...
&amp;gt;&amp;gt;&amp;gt; print_singers(&#39;Blues&#39;, &#39;R.L. Burnside&#39;, &#39;Bessie Smith&#39;, &#39;Skip James&#39;, &#39;Memphis Minnie&#39;)
Genre: Blues
R.L. Burnside
Bessie Smith
Skip James
Memphis Minnie
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This formal parameter is positional, so we have to make sure we pass our arguments to the function in order:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; print_singers(&#39;R.L. Burnside&#39;, &#39;Blues&#39;, &#39;Bessie Smith&#39;, &#39;Skip James&#39;, &#39;Memphis Minnie&#39;)
Genre: R.L. Burnside
Blues
Bessie Smith
Skip James
Memphis Minnie
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This doesn&amp;rsquo;t, however, work the other way around:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def print_singers(*args, genre):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1
    def print_singers(*args, genre):
                                 ^
SyntaxError: invalid syntax
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;**kwargs&lt;/code&gt; is much the same, but with named, &lt;code&gt;key/value&lt;/code&gt;, arguments:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def blues_singer(**kwargs):
...    # Notice we use `.items`, as `kwargs` returns a dictionary
...    for key, value in kwargs.items():
...        print key + &#39; = &#39; + value
...
&amp;gt;&amp;gt;&amp;gt; blues_singer(name=&#39;Memphis Minnie&#39;)
name = Memphis Minnie
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; blues_singer(name=&#39;Memphis Minnie&#39;, born=&#39;3rd June 1897&#39;, died=&#39;6th August 1973&#39;)
born = 3rd June 1897
name = Memphis Minnie
died = 6th August 1973
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;**kwargs&lt;/code&gt; also works alongside formal parameters:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def blues_singer(name, **kwargs):
...     print name
...     for key, value in kwargs.items():
...         print key + &#39; = &#39; + value
...
&amp;gt;&amp;gt;&amp;gt; blues_singer(name=&#39;Memphis Minnie&#39;, born=&#39;3rd June 1897&#39;, died=&#39;6th August 1973&#39;)
Memphis Minnie
born = 3rd June 1897
died = 6th August 1973
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; blues_singer(name=&#39;Memphis Minnie&#39;, born=&#39;3rd June 1897&#39;, died=&#39;6th August 1973&#39;, popular_songs=&#39;Me and My Chauffeur, Evil Devil Woman Blues&#39;)
Memphis Minnie
born = 3rd June 1897
died = 6th August 1973
popular_songs = Me and My Chauffeur, Evil Devil Woman Blues
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As well as being used in defining functions &lt;code&gt;*args&lt;/code&gt; &amp;amp; &lt;code&gt;**kwargs&lt;/code&gt; can also be used when calling functions:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def blues_singer(name, born, died):
...     print name + &#39; was born on &#39; + born + &#39; and died on &#39; + died
...
&amp;gt;&amp;gt;&amp;gt; # We define our arguments in a separate variable
&amp;gt;&amp;gt;&amp;gt; memphis_minnie = (&#39;Memphis Minnie&#39;, &#39;3rd June 1897&#39;, &#39;6th August 1973&#39;)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; # We call the function with the `*` before our arguments variable
&amp;gt;&amp;gt;&amp;gt; blues_singer(*memphis_minnie)
Memphis Minnie was born on 3rd June 1897 and died on 6th August 1973
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; # Using `args` for our variable name might make more sense
&amp;gt;&amp;gt;&amp;gt; args = (&#39;Memphis Minnie&#39;, &#39;3rd June 1897&#39;, &#39;6th August 1973&#39;)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; blues_singer(*args)
Memphis Minnie was born on 3rd June 1897 and died on 6th August 1973
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; args = (&#39;Bessie Smith&#39;, &#39;15th April 1894&#39;, &#39;26th September 1937&#39;)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; blues_singer(*args)
Bessie Smith was born on 15th April 1894 and died on 26th September 1937
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; # And we can pass the values in as a combination of formal parameters and a list of `args`
&amp;gt;&amp;gt;&amp;gt; args = (&#39;15th April 1894&#39;, &#39;26th September 1937&#39;)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; blues_singer(&#39;Memphis Minnie&#39;, *args)
Memphis Minnie was born on 3rd June 1897 and died on 6th August 1973
&amp;gt;&amp;gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using &lt;code&gt;*args&lt;/code&gt; when calling our function unpacks the values in the &lt;code&gt;args&lt;/code&gt; variable and passes them as positional arguments to the function.
And if we try and ask it to unpack and pass a different number of values than is asked for by the function?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; args = (&#39;Bessie Smith&#39;, &#39;15th April 1894&#39;)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; blues_singer(*args)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: blues_singer() takes exactly 3 arguments (2 given)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; args = (&#39;Bessie Smith&#39;, &#39;15th April 1894&#39;, &#39;26th September 1937&#39;, &#39;Gimme a Pigfoot and a Bottle of Beer&#39;)
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; blues_singer(*args)
Traceback (most recent call last):
  File &amp;quot;&amp;lt;stdin&amp;gt;&amp;quot;, line 1, in &amp;lt;module&amp;gt;
TypeError: blues_singer() takes exactly 3 arguments (4 given)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Just the same as if &lt;code&gt;*args&lt;/code&gt; wasn&amp;rsquo;t being used.
As before, using &lt;code&gt;**kwargs&lt;/code&gt; is the same, except we pass a dictionary to the function:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; def blues_singer(name, born, died):
...      print name + &#39; was born on &#39; + born + &#39; and died on &#39; + died
...
&amp;gt;&amp;gt;&amp;gt; kwargs = {&#39;name&#39;:&#39;Memphis Minnie&#39;, &#39;born&#39;:&#39;3rd June 1897&#39;, &#39;died&#39;:&#39;6th August 1973&#39;}
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; blues_singer(**kwargs)
Memphis Minnie was born on 3rd June 1897 and died on 6th August 1973
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; # We can also pass in the values as a combination of formal parameters and a `kwargs` dictionary
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; kwargs = {&#39;born&#39;:&#39;3rd June 1897&#39;, &#39;died&#39;:&#39;6th August 1973&#39;}
&amp;gt;&amp;gt;&amp;gt;
&amp;gt;&amp;gt;&amp;gt; blues_singer(name=&#39;Memphis Minnie&#39;, **kwargs)
Memphis Minnie was born on 3rd June 1897 and died on 6th August 1973
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, that&amp;rsquo;s that, then.&lt;/p&gt;

&lt;p&gt;In writing this post I borrowed heavily from:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://agiliq.com/blog/2012/06/understanding-args-and-kwargs/&#34;&gt;Agiliq&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://book.pythontips.com/en/latest/args_and_kwargs.html&#34;&gt;Python Tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/3394835/args-and-kwargs&#34;&gt;Stack Overflow&lt;/a&gt; (of course!)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Many thanks to these folks for helping me to understand this.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sister Rosetta Tharpe: Didn&#39;t It Rain</title>
      <link>/post/2015-08-25-sister-rosetta-tharpe-didnt-it-rain/</link>
      <pubDate>Tue, 25 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-08-25-sister-rosetta-tharpe-didnt-it-rain/</guid>
      <description>&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/SR2gR6SZC2M&#34; frameborder=&#34;0&#34;&gt; &lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Notes on Node.js: Dipping My Toes In</title>
      <link>/post/2015-08-21-node-dipping-toes/</link>
      <pubDate>Fri, 21 Aug 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015-08-21-node-dipping-toes/</guid>
      <description>&lt;p&gt;I started using &lt;a href=&#34;http://exercism.io/&#34;&gt;exercism.io&lt;/a&gt; this morning after hearing about it on &lt;a href=&#34;http://www.codenewbie.org/podcast/nitpicks-and-devils&#34;&gt;Code Newbies&lt;/a&gt;, mainly to get more practice with Python.  I&amp;rsquo;m also learning JavaScript as well and, seeing there was a JS track, I thought I&amp;rsquo;d have a glance at it, and inadvertently started using node.js, something I&amp;rsquo;ve wanted to do for a while now.  I got that new &lt;em&gt;&amp;lsquo;don&amp;rsquo;t quite understand but feel real excited&amp;rsquo;&lt;/em&gt; feeling.&lt;/p&gt;

&lt;p&gt;As far as my understanding goes node.js is basically JavaScript, the programming language of the web, on a computer, desktop/laptop/server etc., rather than in a browser. It&amp;rsquo;s easy enough to work out how to install node.js so I won&amp;rsquo;t go into that here.
I started out with a &lt;code&gt;Hello World&lt;/code&gt; exercise, as you do.  I gotta say, it looked strange, no &lt;code&gt;$(document).ready()&lt;/code&gt; here, and I did end up sneaking a peek &lt;a href=&#34;https://github.com/exercism/xjavascript/blob/master/hello-world/example.js&#34;&gt;here&lt;/a&gt;.  I really didn&amp;rsquo;t know where to start with fixing the given code to make the tests pass, my mind was going down overly complicated unorganised paths, and I figured I&amp;rsquo;d be better off working backwards.  Which is what this will be a part of, break apart the code, understand the parts.&lt;/p&gt;

&lt;p&gt;So, anyway, this is the code.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#39;use strict&#39;;

var HelloWorld = function() {};

HelloWorld.prototype.hello = function(name) {
  name = name || &#39;world&#39;;
  return &#39;Hello, &#39; + name + &#39;!&#39;;
};

module.exports = HelloWorld;

var helloWorld = new HelloWorld();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; &amp;amp; &lt;code&gt;function&lt;/code&gt; stuff I understand, but &lt;code&gt;strict&lt;/code&gt;? &lt;code&gt;prototypes&lt;/code&gt;? &lt;code&gt;module.exports&lt;/code&gt;? Wha&amp;rsquo;fu&amp;rsquo;?&lt;/p&gt;

&lt;p&gt;What was interesting was running it.  Just like Python really; &lt;code&gt;node .\hello-world.js&lt;/code&gt; in the CLI.  Let&amp;rsquo;s stick a &lt;code&gt;console.log(&#39;Hello node, whaddya know?&#39;)&lt;/code&gt; in there:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt; &amp;gt; node .\hello-world.js
Hello node, whaddya know?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cool, huh? And to run the tests:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt; &amp;gt; jasmine-node .\hello-world.js


Finished in 0 seconds
0 tests, 0 assertions, 0 failures, 0 skipped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, it&amp;rsquo;s basic, it&amp;rsquo;s obvious, but it&amp;rsquo;s blowin&amp;rsquo; my mind just a bit.  I&amp;rsquo;m well excited to get started with this and explore it further.  I&amp;rsquo;m gonna go over this little code snippet and work it out as best I can, and then who knows, maybe I&amp;rsquo;ll get a MEAN stack up and running for my &lt;em&gt;new awesome web app idea&lt;/em&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>