<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on bordeltabernacle</title>
    <link>/post/</link>
    <description>Recent content in Posts on bordeltabernacle</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Thu, 11 Aug 2016 00:00:00 +0000</lastBuildDate>
    <atom:link href="/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Network Automation with Ansible Playbooks</title>
      <link>/post/2016/08/network-automation-with-ansible-playbooks/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016/08/network-automation-with-ansible-playbooks/</guid>
      <description>&lt;p&gt;Following on from my &lt;a href=&#34;https://bordeltabernacle.github.io/2016/08/01/starting-out-with-ansible-cisco-and-network-automation.html&#34;&gt;previous post&lt;/a&gt;, I want to take a look at &lt;em&gt;playbooks&lt;/em&gt;,
the mechanism Ansible uses for building and managing task automation. Playbooks
are text files that declare the tasks you want carried out in a series of
&lt;em&gt;plays&lt;/em&gt;. This text file can then easily be re-used, shared, and version controlled.
Let&amp;rsquo;s have a look at how we use them then, yeah?&lt;/p&gt;

&lt;p&gt;Okay, so &lt;a href=&#34;https://bordeltabernacle.github.io/2016/08/01/starting-out-with-ansible-cisco-and-network-automation.html&#34;&gt;previously&lt;/a&gt; we had an inventory file that listed the hosts in our
lab network.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[routers]
router-one ansible_host=192.168.0.1
router-two ansible_host=192.168.0.2
router-three ansible_host=192.168.0.3

[routers:vars]
ansible_user=vagrant
ansible_password=vagrant
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s add our first playbook.  Playbooks are written as &lt;em&gt;yaml&lt;/em&gt; files, a format equivalent to &lt;em&gt;json&lt;/em&gt; or &lt;em&gt;xml&lt;/em&gt; but intended to be more human readable. Be warned, &lt;em&gt;yaml&lt;/em&gt; is very particular about whitespace. If we create a new file alongside out playbook called &lt;code&gt;get_inventory_info.yaml&lt;/code&gt;, we&amp;rsquo;ll use it to get the output from a &lt;code&gt;show inventory&lt;/code&gt; command.&lt;/p&gt;

&lt;p&gt;{% raw %}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
- name: Get Inventory Information
  hosts: routers
  tasks:
    - name: Send Show Inventory Command
      ios_command:
        host: &amp;quot;{{ ansible_host }}&amp;quot;
        username: &amp;quot;{{ ansible_user }}&amp;quot;
        password: &amp;quot;{{ ansible_password }}&amp;quot;
        commands:
          - show inventory
      register: inventory
    - debug: var=inventory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endraw %}&lt;/p&gt;

&lt;p&gt;So, what&amp;rsquo;s going on here?&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;---&lt;/code&gt; indicates that it&amp;rsquo;s a &lt;em&gt;yaml&lt;/em&gt; file.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name: Get Inventory Information&lt;/code&gt; is the name of our playbook&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hosts: routers&lt;/code&gt; is the devices we want to target&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tasks:&lt;/code&gt; what follows is the list of tasks we want to carry out&lt;/li&gt;
&lt;li&gt;&lt;code&gt;name: Send Show Inventory Command&lt;/code&gt; is the name of our task&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ios_command:&lt;/code&gt; this is &lt;a href=&#34;https://docs.ansible.com/ansible/ios_command_module.html&#34;&gt;the module&lt;/a&gt; we are using&lt;/li&gt;
&lt;li&gt;{% raw %}&lt;code&gt;host: &amp;quot;{{ ansible_host }}&amp;quot;&lt;/code&gt;{% endraw %}, {% raw %}&lt;code&gt;username: &amp;quot;{{ ansible_user }}&amp;quot;&lt;/code&gt;{% endraw %} &amp;amp; {% raw %}&lt;code&gt;password: &amp;quot;{{ ansible_password }}&amp;quot;&lt;/code&gt;{% endraw %} are the connection details we&amp;rsquo;re going to use. The {% raw %}&lt;code&gt;{{ }}&lt;/code&gt;{% endraw %} means that this is a variable. All variables exist within the Ansible environment you&amp;rsquo;re in, in this case these variables are from the &lt;em&gt;inventory&lt;/em&gt; file above. Doing this means we can loop through all the hosts in our &lt;em&gt;routers&lt;/em&gt; group, and they can have different username/password combinations if needs be.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commands: - show inventory&lt;/code&gt; is the command we&amp;rsquo;ll be using.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;register: inventory&lt;/code&gt; here we&amp;rsquo;re storing the output of the task in the variable &lt;code&gt;inventory&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;debug: var=inventory&lt;/code&gt; this will output the variable &lt;code&gt;inventory&lt;/code&gt; to our terminal.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To run this we use the &lt;code&gt;ansible-playbook&lt;/code&gt; command, along with the name of our playbook and the &lt;code&gt;-i&lt;/code&gt; flag to specify our inventory.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ansible-playbook get_inventory_info.yaml -i inventory&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;OK, let&amp;rsquo;s go&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;PLAY [Get Inventory Information] ***********************************************

TASK [setup] *******************************************************************
fatal: [router-one]: UNREACHABLE! =&amp;gt; {&amp;quot;changed&amp;quot;: false, &amp;quot;msg&amp;quot;: &amp;quot;SSH Error: data could not be sent to the remote host. Make sure this host can be reached over ssh&amp;quot;, &amp;quot;unreachable&amp;quot;: true}
fatal: [router-two]: UNREACHABLE! =&amp;gt; {&amp;quot;changed&amp;quot;: false, &amp;quot;msg&amp;quot;: &amp;quot;SSH Error: data could not be sent to the remote host. Make sure this host can be reached over ssh&amp;quot;, &amp;quot;unreachable&amp;quot;: true}
fatal: [router-three]: UNREACHABLE! =&amp;gt; {&amp;quot;changed&amp;quot;: false, &amp;quot;msg&amp;quot;: &amp;quot;SSH Error: data could not be sent to the remote host. Make sure this host can be reached over ssh&amp;quot;, &amp;quot;unreachable&amp;quot;: true}

PLAY RECAP *********************************************************************
router-one                : ok=0    changed=0    unreachable=1    failed=0
router-two               : ok=0    changed=0    unreachable=1    failed=0
router-three             : ok=0    changed=0    unreachable=1    failed=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Arggh, whaa? This is because we&amp;rsquo;re dealing with Cisco pets not server cattle. As I mentioned before, Ansible is trying to run some Python code on our hosts, which is not going to happen with Cisco IOS, we need to run the code on our local machine. So let&amp;rsquo;s add the following to our &lt;em&gt;inventory&lt;/em&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[routers:vars]
ansible_connection=local
ansible_user=vagrant
ansible_password=vagrant
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That line there, &lt;code&gt;ansible_connection=local&lt;/code&gt;, should take care of this problem for us.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;PLAY [Get Inventory Information] ***********************************************

TASK [setup] *******************************************************************
ok: [router-one]
ok: [router-one]
ok: [router-two]

TASK [Send Show Inventory Command] *********************************************
ok: [router-one]
ok: [router-one]
ok: [router-two]

TASK [debug] *******************************************************************
ok: [router-two] =&amp;gt; {
    &amp;quot;output&amp;quot;: {
        &amp;quot;changed&amp;quot;: false,
        &amp;quot;stdout&amp;quot;: [
            &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ1545706V, Hw Revision: 1.0\&amp;quot;\nPID: CISCO2921/K9      , VID: V05 , SN: FCZ1545706V\n\nNAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;\nPID: PWR-2921-51-AC    , VID: V02 , SN: DCA1536K3WX\n\n&amp;quot;
        ],
        &amp;quot;stdout_lines&amp;quot;: [
            [
                &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ1545706V, Hw Revision: 1.0\&amp;quot;&amp;quot;,
                &amp;quot;PID: CISCO2921/K9      , VID: V05 , SN: FCZ1545706V&amp;quot;,
                &amp;quot;&amp;quot;,
                &amp;quot;NAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;&amp;quot;,
                &amp;quot;PID: PWR-2921-51-AC    , VID: V02 , SN: DCA1536K3WX&amp;quot;,
                &amp;quot;&amp;quot;,
                &amp;quot;&amp;quot;
            ]
        ]
    }
}
ok: [router-two] =&amp;gt; {
    &amp;quot;output&amp;quot;: {
        &amp;quot;changed&amp;quot;: false,
        &amp;quot;stdout&amp;quot;: [
            &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ192570GZ, Hw Revision: 1.0\&amp;quot;\nPID: CISCO2921/K9      , VID: V08 , SN: FCZ192570GZ\n\nNAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;\nPID: PWR-2921-51-AC    , VID: V03 , SN: QCS19060PYS\n\n&amp;quot;
        ],
        &amp;quot;stdout_lines&amp;quot;: [
            [
                &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ192570GZ, Hw Revision: 1.0\&amp;quot;&amp;quot;,
                &amp;quot;PID: CISCO2921/K9      , VID: V08 , SN: FCZ192570GZ&amp;quot;,
                &amp;quot;&amp;quot;,
                &amp;quot;NAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;&amp;quot;,
                &amp;quot;PID: PWR-2921-51-AC    , VID: V03 , SN: QCS19060PYS&amp;quot;,
                &amp;quot;&amp;quot;,
                &amp;quot;&amp;quot;
            ]
        ]
    }
}
ok: [router-three] =&amp;gt; {
    &amp;quot;output&amp;quot;: {
        &amp;quot;changed&amp;quot;: false,
        &amp;quot;stdout&amp;quot;: [
            &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ192560EG, Hw Revision: 1.0\&amp;quot;\nPID: CISCO2921/K9      , VID: V08 , SN: FCZ192560EG\n\nNAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;\nPID: PWR-2921-51-AC    , VID: V03 , SN: QCS19060RV1\n\n&amp;quot;
        ],
        &amp;quot;stdout_lines&amp;quot;: [
            [
                &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ192560EG, Hw Revision: 1.0\&amp;quot;&amp;quot;,
                &amp;quot;PID: CISCO2921/K9      , VID: V08 , SN: FCZ192560EG&amp;quot;,
                &amp;quot;&amp;quot;,
                &amp;quot;NAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;&amp;quot;,
                &amp;quot;PID: PWR-2921-51-AC    , VID: V03 , SN: QCS19060RV1&amp;quot;,
                &amp;quot;&amp;quot;,
                &amp;quot;&amp;quot;
            ]
        ]
    }
}

PLAY RECAP *********************************************************************
router-one                : ok=3    changed=0    unreachable=0    failed=0
router-two                : ok=3    changed=0    unreachable=0    failed=0
router-three              : ok=3    changed=0    unreachable=0    failed=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Yessss! Job&amp;rsquo;s a good &amp;lsquo;un, let&amp;rsquo;s go home.
Nah, not yet. We can smooth things out a bit. At the beginning of the output you can see a &lt;code&gt;[setup]&lt;/code&gt; task being run, that is an Ansible default that gathers facts from the hosts, like operating system, ip address etc. However, because we&amp;rsquo;re using &lt;code&gt;ansible_connection=local&lt;/code&gt; this task is just gathering facts from the local machine, 3 times in this case! Totally useless. So we can add &lt;code&gt;gather_facts: no&lt;/code&gt; to our playbook to avoid this time waster. We also don&amp;rsquo;t need all of that output so, as this is &lt;em&gt;json&lt;/em&gt; we can be a bit more selective about it by using &lt;code&gt;debug: var=inventory.stdout_lines[0]&lt;/code&gt;. Ansible has a &lt;code&gt;provider&lt;/code&gt; argument which can be a dictionary object which defines the connection to the host, meaning we can separate this information from our playbooks, and not have to repeat it in every playbook. Our playbook now looks like this:&lt;/p&gt;

&lt;p&gt;{% raw %}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
- name: Get Inventory Information
  gather_facts: no
  hosts: routers
  tasks:
    - name: Send Show Inventory Command
      ios_command:
        provider: &amp;quot;{{ provider }}&amp;quot;
        commands:
          - show inventory
      register: inventory
    - debug: var=inventory.stdout_lines[0]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endraw %}&lt;/p&gt;

&lt;p&gt;To store group variables, such as &lt;code&gt;provider&lt;/code&gt;, we can use a directory called &lt;em&gt;group_vars&lt;/em&gt;. This directory name is pre-defined by Ansible. Within it we create a &lt;em&gt;yaml&lt;/em&gt; file named after the group, &lt;em&gt;routers&lt;/em&gt;. While we&amp;rsquo;re at it, if we&amp;rsquo;re creating a &lt;em&gt;routers&lt;/em&gt; variable file, we can move the variables out of our inventory into it. So, in &lt;code&gt;group_vars/routers.yaml&lt;/code&gt; we have&amp;hellip;&lt;/p&gt;

&lt;p&gt;{% raw %}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
ansible_connection: local
ansible_user: vagrant
ansible_password: vagrant
provider:
  host: &amp;quot;{{ ansible_host }}&amp;quot;
  username: &amp;quot;{{ ansible_user }}&amp;quot;
  password: &amp;quot;{{ ansible_password }}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endraw %}&lt;/p&gt;

&lt;p&gt;Really, we shouldn&amp;rsquo;t be writing our password down, should we? So let&amp;rsquo;s delete the &lt;code&gt;ansible_password: vagrant&lt;/code&gt; line and use the command line &lt;code&gt;--ask-pass&lt;/code&gt; flag instead.&lt;/p&gt;

&lt;p&gt;Our inventory file now looks like this, just fyi:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[routers]
192.168.0.1
192.168.0.2
192.168.0.3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I&amp;rsquo;ve removed the hostnames, just because, it doesn&amp;rsquo;t really change anything, except the names in the output.
If we run &lt;code&gt;ansible-playbook get_inventory_info.yaml -i inventory --ask-pass&lt;/code&gt; we get a prompt for the password&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;SSH password:

PLAY [Get Inventory Information] ***********************************************

TASK [Send Show Inventory Command] *********************************************
ok: [192.168.0.2]
ok: [192.168.0.3]
ok: [192.168.0.1]

TASK [debug] *******************************************************************
ok: [192.168.0.1] =&amp;gt; {
    &amp;quot;inventory.stdout_lines[0]&amp;quot;: [
        &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ1545706V, Hw Revision: 1.0\&amp;quot;&amp;quot;,
        &amp;quot;PID: CISCO2921/K9      , VID: V05 , SN: FCZ1545706V&amp;quot;,
        &amp;quot;&amp;quot;,
        &amp;quot;NAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;&amp;quot;,
        &amp;quot;PID: PWR-2921-51-AC    , VID: V02 , SN: DCA1536K3WX&amp;quot;,
        &amp;quot;&amp;quot;,
        &amp;quot;&amp;quot;
    ]
}
ok: [192.168.0.2] =&amp;gt; {
    &amp;quot;inventory.stdout_lines[0]&amp;quot;: [
        &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ192570GZ, Hw Revision: 1.0\&amp;quot;&amp;quot;,
        &amp;quot;PID: CISCO2921/K9      , VID: V08 , SN: FCZ192570GZ&amp;quot;,
        &amp;quot;&amp;quot;,
        &amp;quot;NAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;&amp;quot;,
        &amp;quot;PID: PWR-2921-51-AC    , VID: V03 , SN: QCS19060PYS&amp;quot;,
        &amp;quot;&amp;quot;,
        &amp;quot;&amp;quot;
    ]
}
ok: [192.168.0.3] =&amp;gt; {
    &amp;quot;inventory.stdout_lines[0]&amp;quot;: [
        &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ192560EG, Hw Revision: 1.0\&amp;quot;&amp;quot;,
        &amp;quot;PID: CISCO2921/K9      , VID: V08 , SN: FCZ192560EG&amp;quot;,
        &amp;quot;&amp;quot;,
        &amp;quot;NAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;&amp;quot;,
        &amp;quot;PID: PWR-2921-51-AC    , VID: V03 , SN: QCS19060RV1&amp;quot;,
        &amp;quot;&amp;quot;,
        &amp;quot;&amp;quot;
    ]
}

PLAY RECAP *********************************************************************
192.168.0.1                : ok=2    changed=0    unreachable=0    failed=0
192.168.0.2                : ok=2    changed=0    unreachable=0    failed=0
192.168.0.3                : ok=2    changed=0    unreachable=0    failed=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There, that&amp;rsquo;s a bit clearer. If we want we can add a few commands in to our playbook. Let&amp;rsquo;s change the name of it to &lt;code&gt;get_device_information.yaml&lt;/code&gt; and change it to this:&lt;/p&gt;

&lt;p&gt;{% raw %}&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---
- name: Get Device Information
  gather_facts: no
  hosts: routers
  tasks:
    - name: Send Show Commands
      ios_command:
        provider: &amp;quot;{{ provider }}&amp;quot;
        commands:
          - show inventory
          - sh run | inc hostname
          - sh ver | inc image
          - sh ip int brief
      register: info
    - debug: var=info.stdout_lines
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;{% endraw %}&lt;/p&gt;

&lt;p&gt;Run it. &lt;code&gt;ansible-playbook get_device_info.yaml -i inventory --ask-pass&lt;/code&gt; and a brief moment later&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;SSH password:

PLAY [Get Device Information] **************************************************

TASK [Send Show Commands] ******************************************************
ok: [192.168.0.3]
ok: [192.168.0.1]
ok: [192.168.0.2]

TASK [debug] *******************************************************************
ok: [192.168.0.1] =&amp;gt; {
    &amp;quot;info.stdout_lines&amp;quot;: [
        [
            &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ1545706V, Hw Revision: 1.0\&amp;quot;&amp;quot;,
            &amp;quot;PID: CISCO2921/K9      , VID: V05 , SN: FCZ1545706V&amp;quot;,
            &amp;quot;&amp;quot;,
            &amp;quot;NAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;&amp;quot;,
            &amp;quot;PID: PWR-2921-51-AC    , VID: V02 , SN: DCA1536K3WX&amp;quot;,
            &amp;quot;&amp;quot;,
            &amp;quot;&amp;quot;
        ],
        [
            &amp;quot;hostname router-one&amp;quot;
        ],
        [
            &amp;quot;System image file is \&amp;quot;flash0:c2900-IMAGE-ONE.SPA.154-3.M3.bin\&amp;quot;&amp;quot;
        ],
        [
            &amp;quot;Interface                  IP-Address      OK? Method Status                Protocol&amp;quot;,
            &amp;quot;Embedded-Service-Engine0/0 unassigned      YES NVRAM  administratively down down    &amp;quot;,
            &amp;quot;GigabitEthernet0/0         192.168.0.1     YES NVRAM  up                    up      &amp;quot;,
            &amp;quot;GigabitEthernet0/1         10.10.10.11     YES manual down                  down    &amp;quot;,
            &amp;quot;GigabitEthernet0/2         unassigned      YES NVRAM  administratively down down    &amp;quot;
        ]
    ]
}
ok: [192.168.0.3] =&amp;gt; {
    &amp;quot;info.stdout_lines&amp;quot;: [
        [
            &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ192560EG, Hw Revision: 1.0\&amp;quot;&amp;quot;,
            &amp;quot;PID: CISCO2921/K9      , VID: V08 , SN: FCZ192560EG&amp;quot;,
            &amp;quot;&amp;quot;,
            &amp;quot;NAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;&amp;quot;,
            &amp;quot;PID: PWR-2921-51-AC    , VID: V03 , SN: QCS19060RV1&amp;quot;,
            &amp;quot;&amp;quot;,
            &amp;quot;&amp;quot;
        ],
        [
            &amp;quot;hostname router-three&amp;quot;
        ],
        [
            &amp;quot;System image file is \&amp;quot;flash0:c2900-IMAGE-ONE.SPA.154-3.M3.bin\&amp;quot;&amp;quot;
        ],
        [
            &amp;quot;Interface                  IP-Address      OK? Method Status                Protocol&amp;quot;,
            &amp;quot;Embedded-Service-Engine0/0 unassigned      YES NVRAM  administratively down down    &amp;quot;,
            &amp;quot;GigabitEthernet0/0         192.168.0.3     YES NVRAM  up                    up      &amp;quot;,
            &amp;quot;GigabitEthernet0/1         10.10.10.13     YES manual down                  down    &amp;quot;,
            &amp;quot;GigabitEthernet0/2         unassigned      YES NVRAM  administratively down down    &amp;quot;
        ]
    ]
}
ok: [192.168.0.2] =&amp;gt; {
    &amp;quot;info.stdout_lines&amp;quot;: [
        [
            &amp;quot;NAME: \&amp;quot;CISCO2921/K9\&amp;quot;, DESCR: \&amp;quot;CISCO2921/K9 chassis, Hw Serial#: FCZ192570GZ, Hw Revision: 1.0\&amp;quot;&amp;quot;,
            &amp;quot;PID: CISCO2921/K9      , VID: V08 , SN: FCZ192570GZ&amp;quot;,
            &amp;quot;&amp;quot;,
            &amp;quot;NAME: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;, DESCR: \&amp;quot;C2921/C2951 AC Power Supply\&amp;quot;&amp;quot;,
            &amp;quot;PID: PWR-2921-51-AC    , VID: V03 , SN: QCS19060PYS&amp;quot;,
            &amp;quot;&amp;quot;,
            &amp;quot;&amp;quot;
        ],
        [
            &amp;quot;hostname router-two&amp;quot;
        ],
        [
            &amp;quot;System image file is \&amp;quot;flash0:c2900-IMAGE-ONE.SPA.154-3.M3.bin\&amp;quot;&amp;quot;
        ],
        [
            &amp;quot;Interface                  IP-Address      OK? Method Status                Protocol&amp;quot;,
            &amp;quot;Embedded-Service-Engine0/0 unassigned      YES NVRAM  administratively down down    &amp;quot;,
            &amp;quot;GigabitEthernet0/0         192.168.0.2     YES NVRAM  up                    up      &amp;quot;,
            &amp;quot;GigabitEthernet0/1         10.10.10.12     YES manual down                  down    &amp;quot;,
            &amp;quot;GigabitEthernet0/2         unassigned      YES NVRAM  administratively down down    &amp;quot;
        ]
    ]
}

PLAY RECAP *********************************************************************
192.168.0.1                : ok=2    changed=0    unreachable=0    failed=0
192.168.0.2                : ok=2    changed=0    unreachable=0    failed=0
192.168.0.3                : ok=2    changed=0    unreachable=0    failed=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lovely, &lt;em&gt;now&lt;/em&gt; we can go home.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s more to do here, such as saving this output to file &amp;amp; sending configuration changes, but we can do that later.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Songs to Code to: Flesh Without Blood</title>
      <link>/post/2016/08/grimes-flesh-without-blood/</link>
      <pubDate>Thu, 11 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016/08/grimes-flesh-without-blood/</guid>
      <description>&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/Tv9YoYCKNoE&#34; frameborder=&#34;0&#34;&gt; &lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Using Vagrant to set up an Ansible Environment</title>
      <link>/post/2016/08/using-vagrant-set-up-ansible-environment/</link>
      <pubDate>Wed, 03 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016/08/using-vagrant-set-up-ansible-environment/</guid>
      <description>&lt;p&gt;Vagrant is a tool for creating, managing and sharing Virtual Machines. It&amp;rsquo;s
really helpful for creating contained environments with specific requirements
that can be easily built up, tore down and shared with others. It&amp;rsquo;s especially
helpful if, like me, you have to spend time working on a Windows laptop, because,
well, Enterprise.&lt;/p&gt;

&lt;p&gt;Following on from my &lt;a href=&#34;https://bordeltabernacle.github.io/2016/08/01/starting-out-with-ansible-cisco-and-network-automation.html&#34;&gt;previous post&lt;/a&gt;,
I&amp;rsquo;ve found that Vagrant is a fairly painless way to expose the network engineers
I work with to Ansible. Once it&amp;rsquo;s installed, I can share a zip file for them to
unzip and run &lt;code&gt;vagrant up&lt;/code&gt; and &lt;code&gt;vagrant ssh&lt;/code&gt; from the command line, and they&amp;rsquo;re
in a working Ansible environment. And if they mess something up, they can just
destroy it and start again, no bother. Let&amp;rsquo;s get set up&amp;hellip;&lt;/p&gt;

&lt;p&gt;Vagrant manages VM&amp;rsquo;s through a hypervisor, with the default being Virtualbox,
though you can use VMware if you have the extra cash. Therefore we need to
install Virtualbox first, from &lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34;&gt;here&lt;/a&gt;.
We&amp;rsquo;re going ot grab the Windows &lt;code&gt;.exe&lt;/code&gt; file.  Double click on it, and follow
the defaults through to the end.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/vbox_download.png&#34; alt=&#34;vbox_download&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Now we can install Vagrant, from &lt;a href=&#34;https://www.vagrantup.com/downloads.html&#34;&gt;here&lt;/a&gt;,
grabbing the Windows &lt;code&gt;.msi&lt;/code&gt; file, double clicking on it once it&amp;rsquo;s downloaded and
following the defaults.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/vagrant_download.png&#34; alt=&#34;vagrant_download&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Vagrant is a command line tool, so you&amp;rsquo;re gonna have to be comfortable on the
command line, not too much, just enough to know what it is, how to access it
and how to navigate the directory structure, whether it&amp;rsquo;s through &lt;code&gt;cmd.exe&lt;/code&gt; or
Powershell. I&amp;rsquo;m not going to go into any of that here, but I would recommend
getting &lt;a href=&#34;http://cmder.net/&#34;&gt;cmder&lt;/a&gt; if you&amp;rsquo;re going to spend any sort of time
on the Windows command line.&lt;/p&gt;

&lt;p&gt;So, at your command prompt, if all has been successful you should be able to
type &lt;code&gt;vagrant --version&lt;/code&gt; and get the version of vagrant you have installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Vagrant 1.8.4
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Grand. The beauty of Vagrant is that it&amp;rsquo;s configured from a simple text file,
the &lt;em&gt;Vagrantfile&lt;/em&gt;.  To create one, start a new directory, and then, on the
command line, navigate to within this new directory and type &lt;code&gt;vagrant init&lt;/code&gt;.
This will create a new, highly commented &lt;em&gt;Vagrantfile&lt;/em&gt;.  Read it, and get an
idea of what the different options are. Like most things, you often start with
a bare bones structure like this basic &lt;em&gt;Vagrantfile&lt;/em&gt;, and build it up as you
learn more and your requirements change. Here I&amp;rsquo;m going to explain the Vagrantfile
I use to set up my Ansible machine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# -*- mode: ruby -*-
# vi: set ft=ruby :

vagrant_root = File.dirname(__FILE__)
project_name = &amp;quot;acp&amp;quot;

Vagrant.configure(2) do |config|
    config.vm.box = &amp;quot;ubuntu/trusty64&amp;quot;
    config.vm.box_url = &amp;quot;https://atlas.hashicorp.com/ubuntu/boxes/trusty64&amp;quot;
    config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
        vb.memory = &amp;quot;1028&amp;quot;
        vb.cpus = &amp;quot;1&amp;quot;
    end

    config.vm.define &amp;quot;#{project_name}&amp;quot; do |machine|
        machine.vm.hostname = &amp;quot;#{project_name}&amp;quot;
        machine.vm.synced_folder &amp;quot;#{vagrant_root}/shared&amp;quot;, &amp;quot;/home/vagrant/shared&amp;quot;
        machine.vm.provision :shell, :path =&amp;gt; &amp;quot;#{vagrant_root}/ansible-setup.sh&amp;quot;
    end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Vagrant is written in Ruby, and the first two lines are to do with the Ruby language. Next up we have a couple of variables:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;vagrant_root = File.dirname(__FILE__)
project_name = &amp;quot;acp&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vagrant_root&lt;/code&gt; is the current working directory of the Vagrantfile&lt;/li&gt;
&lt;li&gt;&lt;code&gt;project_name&lt;/code&gt; is the name of the project, here it is &lt;code&gt;acp&lt;/code&gt; for Ansible Cisco Playground.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The next section of the &lt;em&gt;Vagrantfile&lt;/em&gt; starts the machine configuration:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.vm.box = &amp;quot;ubuntu/trusty64&amp;quot;
config.vm.box_url = &amp;quot;https://atlas.hashicorp.com/ubuntu/boxes/trusty64&amp;quot;
config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|
    vb.memory = &amp;quot;1028&amp;quot;
    vb.cpus = &amp;quot;1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config.vm.box = &amp;quot;ubuntu/trusty64&amp;quot;&lt;/code&gt; defines the base operating system, or Vagrant &lt;em&gt;box&lt;/em&gt;, for the VM, here we&amp;rsquo;re using the official Ubuntu 14.04 Server image, but this can be changed to any one of a multitude of Vagrant &lt;em&gt;boxes&lt;/em&gt;, that can be found &lt;a href=&#34;https://vagrantcloud.com/boxes/search&#34;&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config.vm.box_url = &amp;quot;https://atlas.hashicorp.com/ubuntu/boxes/trusty64&amp;quot;&lt;/code&gt; is the url where this box is&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config.vm.provider &amp;quot;virtualbox&amp;quot; do |vb|&lt;/code&gt; this says that if the &lt;code&gt;provider&lt;/code&gt;, the hypervisor, is Virtualbox, do the following&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vb.memory = &amp;quot;1028&amp;quot;&lt;/code&gt; gives the VM 1 GB of RAM&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vb.cpus = &amp;quot;1&amp;quot;&lt;/code&gt; gives the VM 1 CPU&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The last section is where it gets interesting&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;config.vm.define &amp;quot;#{project_name}&amp;quot; do |machine|
    machine.vm.hostname = &amp;quot;#{project_name}&amp;quot;
    machine.vm.synced_folder &amp;quot;#{vagrant_root}/shared&amp;quot;, &amp;quot;/home/vagrant/shared&amp;quot;
    machine.vm.provision :shell, :path =&amp;gt; &amp;quot;#{vagrant_root}/ansible-setup.sh&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;config.vm.define &amp;quot;#{project_name}&amp;quot; do |machine|&lt;/code&gt; here we start to define some parameters for the machine&lt;/li&gt;
&lt;li&gt;&lt;code&gt;machine.vm.hostname = &amp;quot;#{project_name}&amp;quot;&lt;/code&gt; defines the hostname of the machine as the project name&lt;/li&gt;
&lt;li&gt;&lt;code&gt;machine.vm.synced_folder &amp;quot;#{vagrant_root}/shared&amp;quot;, &amp;quot;/home/vagrant/shared&amp;quot;&lt;/code&gt;
this sets up a shared folder between the VM and the host computer, my laptop.
&lt;code&gt;&amp;quot;#{vagrant_root}/shared&amp;quot;&lt;/code&gt; is a folder on the host, within the same directory
as the &lt;em&gt;Vagrantfile&lt;/em&gt;, &lt;code&gt;&amp;quot;/home/vagrant/shared&amp;quot;&lt;/code&gt; is a folder in the vagrant user&amp;rsquo;s
home directory on the VM. These folders will be synced, any changes made in one
will be reflected in the other. This means I can edit and version control files
on my host machine, using my usual workflow, and I can use them easily in the VM,
rather than having to do this work inside the VM.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;machine.vm.provision :shell, :path =&amp;gt; &amp;quot;#{vagrant_root}/ansible-setup.sh&amp;quot;&lt;/code&gt;
this defines the path to a shell script that provisions the VM, installing Ansible.
There are different options for provisioning the Vm, including Ansible itself,
woah, meta! but I find for small environments like this a shell script does fine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is the &lt;code&gt;ansible-setup.sh&lt;/code&gt; file:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash
TZ=Europe/London

echo &amp;quot;+-----------------------------------------------+&amp;quot;
echo &amp;quot;| Provisioning Ansible Cisco Playground Machine |&amp;quot;
echo &amp;quot;+-----------------------------------------------+&amp;quot;
echo &amp;quot;Setting timezone...&amp;quot;
sudo timedatectl set-timezone $TZ &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
echo &amp;quot;Adding dependencies...&amp;quot;
sudo apt-get install software-properties-common &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
echo &amp;quot;Adding Ansible repo...&amp;quot;
sudo apt-add-repository ppa:ansible/ansible &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
echo &amp;quot;Updating apt-get...&amp;quot;
sudo apt-get -y update &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
echo &amp;quot;Installing Git...&amp;quot;
sudo apt-get -y install git &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
echo &amp;quot;Installing Ansible...&amp;quot;
sudo apt-get -y install ansible &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
echo &amp;quot;Installing ntc-ansible module...&amp;quot;
sudo apt-get -y install python-pip &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
sudo apt-get -y install zlib1g-dev libxml2-dev libxslt-dev python-dev &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
sudo pip install ntc-ansible &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
git clone https://github.com/networktocode/ntc-ansible --recursive &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
sudo rm -r /home/vagrant/shared/library &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
sudo mv /home/vagrant/ntc-ansible/library /home/vagrant/shared/library &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
echo &amp;quot;+----------------------------------------------+&amp;quot;
echo &amp;quot;| Ansible Cisco Playground Machine Provisioned |&amp;quot;
echo &amp;quot;+----------------------------------------------+&amp;quot;
echo &amp;quot;|                Go build stuff!               |&amp;quot;
echo &amp;quot;+----------------------------------------------+&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a few things going on in there, including the Ansible installation and
the installation of &lt;a href=&#34;http://jedelman.com/&#34;&gt;Jason Edelman&amp;rsquo;s&lt;/a&gt; excellent third
party Ansible library &lt;a href=&#34;https://github.com/networktocode/ntc-ansible/&#34;&gt;ntc-ansible&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Now, if we do a &lt;code&gt;tree /F&lt;/code&gt; command in the project directory, we can see everything
we now have, the &lt;em&gt;Vagrantfile&lt;/em&gt;, the provision script, the shared folder
(currently empty), and a &lt;code&gt;.vagrant&lt;/code&gt; directory I&amp;rsquo;ve never had to do anything with
since working with Vagrant.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Folder PATH listing for volume Windows
Volume serial number is A879-5C69
C:.
├───Vagrantfile
├───ansible-setup.sh
├───shared
└───.vagrant
    └───machines
        └───acp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Right, we&amp;rsquo;re ready to go. I&amp;rsquo;ve found the vagrant commands I use most often are&amp;hellip;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vagrant up&lt;/code&gt; brings the machine up&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vagrant ssh&lt;/code&gt; establishes an ssh connection to the VM&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vagrant halt&lt;/code&gt; shuts the VM down&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vagrant reload&lt;/code&gt; restarts the VM&lt;/li&gt;
&lt;li&gt;&lt;code&gt;vagrant destroy&lt;/code&gt; destroys the VM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the command line, inside the Vagrant project directory, type in &lt;code&gt;vagrant up&lt;/code&gt;,
and this should, fingers crossed, bring up the new VM.  If this is the first
Vagrant machine you&amp;rsquo;ve created it&amp;rsquo;s going to take some time to download the
Ubuntu image, 15-20 mins maybe. I already have the relevant Ubuntu image, so it
only takes ~60 secs to bring the VM up.  This is the output I get&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Bringing machine &#39;acp&#39; up with &#39;virtualbox&#39; provider...
==&amp;gt; acp: Importing base box &#39;ubuntu/trusty64&#39;...
==&amp;gt; acp: Matching MAC address for NAT networking...
==&amp;gt; acp: Checking if box &#39;ubuntu/trusty64&#39; is up to date...
==&amp;gt; acp: A newer version of the box &#39;ubuntu/trusty64&#39; is available! You currently
==&amp;gt; acp: have version &#39;20160708.1.2&#39;. The latest is version &#39;20160801.0.0&#39;. Run
==&amp;gt; acp: `vagrant box update` to update.
==&amp;gt; acp: Setting the name of the VM: ansible_cisco_playground_acp_1470214415769_53070
==&amp;gt; acp: Clearing any previously set forwarded ports...
==&amp;gt; acp: Clearing any previously set network interfaces...
==&amp;gt; acp: Preparing network interfaces based on configuration...
    acp: Adapter 1: nat
==&amp;gt; acp: Forwarding ports...
    acp: 22 (guest) =&amp;gt; 2222 (host) (adapter 1)
==&amp;gt; acp: Running &#39;pre-boot&#39; VM customizations...
==&amp;gt; acp: Booting VM...
==&amp;gt; acp: Waiting for machine to boot. This may take a few minutes...
    acp: SSH address: 127.0.0.1:2222
    acp: SSH username: vagrant
    acp: SSH auth method: private key
    acp:
    acp: Vagrant insecure key detected. Vagrant will automatically replace
    acp: this with a newly generated keypair for better security.
    acp:
    acp: Inserting generated public key within guest...
    acp: Removing insecure key from the guest if it is present...
    acp: Key inserted! Disconnecting and reconnecting using new SSH key...
==&amp;gt; acp: Machine booted and ready!
==&amp;gt; acp: Checking for guest additions in VM...
    acp: The guest additions on this VM do not match the installed version of
    acp: VirtualBox! In most cases this is fine, but in rare cases it can
    acp: prevent things such as shared folders from working properly. If you see
    acp: shared folder errors, please make sure the guest additions within the
    acp: virtual machine match the version of VirtualBox you have installed on
    acp: your host and reload your VM.
    acp:
    acp: Guest Additions Version: 4.3.36
    acp: VirtualBox Version: 5.0
==&amp;gt; acp: Setting hostname...
==&amp;gt; acp: Mounting shared folders...
    acp: /vagrant =&amp;gt; C:/Users/robertph/code/ansible/ansible_cisco_playground
    acp: /home/vagrant/shared =&amp;gt; C:/Users/robertph/code/ansible/ansible_cisco_playground/shared
==&amp;gt; acp: Running provisioner: shell...
    acp: Running: C:/Users/robertph/AppData/Local/Temp/vagrant-shell20160803-7424-cqcd1j.sh
==&amp;gt; acp: stdin: is not a tty
==&amp;gt; acp: +-----------------------------------------------+
==&amp;gt; acp: | Provisioning Ansible Cisco Playground Machine |
==&amp;gt; acp: +-----------------------------------------------+
==&amp;gt; acp: Setting timezone...
==&amp;gt; acp: Adding dependencies...
==&amp;gt; acp: Adding Ansible repo...
==&amp;gt; acp: Updating apt-get...
==&amp;gt; acp: Installing Git...
==&amp;gt; acp: Installing Ansible...
==&amp;gt; acp: Installing ntc-ansible module...
==&amp;gt; acp: +----------------------------------------------+
==&amp;gt; acp: | Ansible Cisco Playground Machine Provisioned |
==&amp;gt; acp: +----------------------------------------------+
==&amp;gt; acp: |                Go build stuff!               |
==&amp;gt; acp: +----------------------------------------------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The bottom part is the provision script, this will only run the first time the
machine is started.  Otherwise the output will be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;==&amp;gt; acp: Machine already provisioned. Run `vagrant provision` or use the `--provision`
==&amp;gt; acp: flag to force provisioning. Provisioners marked to run always will still run.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It will also be a lot quicker bringing the machine up, a few seconds maybe. So
much quicker than dealing with Virtualbox manually.&lt;/p&gt;

&lt;p&gt;We can check the status of the machine with &lt;code&gt;vagrant status&lt;/code&gt;&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Current machine states:

acp                       running (virtualbox)

The VM is running. To stop this VM, you can run `vagrant halt` to
shut it down forcefully, or you can run `vagrant suspend` to simply
suspend the virtual machine. In either case, to restart it again,
simply run `vagrant up`.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And so now that we have a running VM, we need to access it. For this we use the
&lt;code&gt;vagrant ssh&lt;/code&gt; command, which will bring us into the VM&amp;rsquo;s command line&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Welcome to Ubuntu 14.04.4 LTS (GNU/Linux 3.13.0-92-generic x86_64)

 * Documentation:  https://help.ubuntu.com/

  System information as of Wed Aug  3 10:08:49 BST 2016

  System load:  0.48              Processes:           81
  Usage of /:   4.2% of 39.34GB   Users logged in:     0
  Memory usage: 12%               IP address for eth0: 10.0.2.15
  Swap usage:   0%

  Graph this data and manage this system at:
    https://landscape.canonical.com/

  Get cloud support with Ubuntu Advantage Cloud Guest:
    http://www.ubuntu.com/business/services/cloud

New release &#39;16.04.1 LTS&#39; available.
Run &#39;do-release-upgrade&#39; to upgrade to it.


vagrant@acp:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s check Ansible is there&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vagrant@acp:~$ ansible --version
ansible 2.1.1.0
  config file = /etc/ansible/ansible.cfg
  configured module search path = Default w/o overrides
vagrant@acp:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fantastic! Let&amp;rsquo;s check we&amp;rsquo;ve got a network to the outside world&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vagrant@acp:~$ ping 8.8.8.8
PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
64 bytes from 8.8.8.8: icmp_seq=1 ttl=59 time=20.3 ms
64 bytes from 8.8.8.8: icmp_seq=2 ttl=59 time=19.9 ms
♥
--- 8.8.8.8 ping statistics ---
2 packets transmitted, 2 received, 0% packet loss, time 1003ms
rtt min/avg/max/mdev = 19.930/20.155/20.381/0.266 ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Sweet. And is our shared folder there&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vagrant@acp:~$ ls -l
total 8
drwxr-xr-x 6 root    root    4096 Aug  3 09:55 ntc-ansible
drwxrwxrwx 1 vagrant vagrant 4096 Aug  3 09:56 shared
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There it is, alongside the &lt;code&gt;ntc-ansible&lt;/code&gt; module. If we create a file in there,
we should see it on our host machine.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vagrant@acp:~$ echo &amp;quot;Hello Windows, from Linux&amp;quot; &amp;gt; shared/hello.txt
vagrant@acp:~$ ls -l shared/
total 1
-rwxrwxrwx 1 vagrant vagrant 26 Aug  3 10:17 hello.txt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/hello_msg.png&#34; alt=&#34;hello_msg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Good good, we can now start creating our Ansible files on our host machine, and
easily run them in the Vagrant VM.  And when we need to share what we&amp;rsquo;ve done,
we can just zip up the directory, or version control it in git, share it, and
others can &lt;code&gt;vagrant up&lt;/code&gt; and &lt;code&gt;vagrant ssh&lt;/code&gt; into the working environment we&amp;rsquo;ve created.&lt;/p&gt;

&lt;p&gt;This Ansible Cisco Playground directory is up on Github if you want to clone/download
it and have a play.  It is a work in progress, and a little janky currently,
with no documentation, but &lt;a href=&#34;https://github.com/bordeltabernacle/ansible_cisco_playground&#34;&gt;here it is nonetheless&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Starting out with Ansible, Cisco and Network Automation</title>
      <link>/post/2016/08/starting-out-with-ansible-cisco-and-network-automation/</link>
      <pubDate>Mon, 01 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016/08/starting-out-with-ansible-cisco-and-network-automation/</guid>
      <description>&lt;p&gt;Recently I&amp;rsquo;ve been spending more time exploring network automation, using
homegrown scripts, Cisco&amp;rsquo;s APIC-EM, and Ansible. I like Ansible, and since
release 2.1, they&amp;rsquo;ve started including dedicated networking modules, which is
great. I&amp;rsquo;ve only scratched the surface of Ansible, but I&amp;rsquo;ve already had great
success with it in the lab. So, let&amp;rsquo;s get it set up and doing our work for us,
yeah?&lt;/p&gt;

&lt;p&gt;Ansible requires Python 2, and doesn&amp;rsquo;t support Python 3. It also doesn&amp;rsquo;t work
with Windows as the control machine. So I&amp;rsquo;m going to install Ansible on an Ubuntu
14.04 virtual machine, though you could do the same on the more recent Ubuntu
16.04 as well.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install software-properties-common
sudo apt-add-repository ppa:ansible/ansible
sudo apt-get -y update
sudo apt-get -y install ansible
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If that all goes well, typing in &lt;code&gt;ansible --version&lt;/code&gt; should show the following
output:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ansible 2.1.0.0
  config file = /etc/ansible/ansible.cfg
  configured module search path = Default w/o overrides
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The first thing we need to do is specify our target devices that we want to
connect to. This is done using an inventory file. In my lab I have 3 Cisco
2921 routers, each with a minimal configuration, enough to ssh to.  So,
hostname, username/secret, ip domain name, and ssh crypto.
These are hooked up to a Cisco switch with no config on, and
then my laptop is connected by ethernet, with a static ip address on
the same &lt;code&gt;192.168.0.0/24&lt;/code&gt; network, so my Ansible VM will just get NAT&amp;rsquo;d through
this address. Pretty basic, but enough for these purposes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{{ site.url }}/images/IMAG0131.jpg&#34; alt=&#34;routers&#34; /&gt;&lt;/p&gt;

&lt;p&gt;So, in a directory created for this Ansible project, I&amp;rsquo;ve created a file
called &lt;em&gt;hosts&lt;/em&gt;, without a file extension. As far as I understand, this file can
be called anything, and can have a file extension if it makes your life easier,
but convention has it named &lt;em&gt;hosts&lt;/em&gt;, or sometimes &lt;em&gt;inventory&lt;/em&gt;, and the contents
have to be in an INI format. This is where we&amp;rsquo;re going to list our hosts. My
hosts file contains my 3 2921 routers and looks like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[routers]
router-one ansible_host=192.168.0.1
router-two ansible_host=192.168.0.2
router-three ansible_host=192.168.0.3

[routers:vars]
ansible_user=vagrant
ansible_password=vagrant
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, I have a group called &lt;code&gt;routers&lt;/code&gt; that lists each host&amp;rsquo;s name,
followed by the &lt;code&gt;ansible_host&lt;/code&gt; variable, which is the ip address of the host.
Below that are listed a couple of variables for every host in the &lt;code&gt;routers&lt;/code&gt;
group, under the heading &lt;code&gt;[routers:vars]&lt;/code&gt;; &lt;code&gt;ansible_user&lt;/code&gt; is the username on
the host, and &lt;code&gt;ansible_password&lt;/code&gt; is the password on the device, these correspond
with this configuration on each router:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;username vagrant privilege 15 secret 5 $1$lGlV$sF4MKyPYZlteNVgGHo9tL1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can now use the &lt;code&gt;ansible&lt;/code&gt; command line client to interact with our routers.
Most Ansible guides deal with servers, and start off by using the Ansible &lt;code&gt;ping&lt;/code&gt;
module. We can&amp;rsquo;t do that here. Like most Ansible modules, the &lt;code&gt;ping&lt;/code&gt; module
works by bundling up some Python code, which it delivers to the device via SSH
and executes. We can&amp;rsquo;t run Python code on our Cisco routers, so we&amp;rsquo;ll take a
different approach to get started.&lt;/p&gt;

&lt;p&gt;The raw module &lt;em&gt;&amp;lsquo;executes a low-down and dirty SSH command&amp;rsquo;&lt;/em&gt;, perfect.&lt;/p&gt;

&lt;p&gt;So, let&amp;rsquo;s run the following comand:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ansible all -m raw -a &amp;quot;executable=&#39;&#39; sh run | inc hostname&amp;quot; -i hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ansible&lt;/code&gt; is the command line client&lt;/li&gt;
&lt;li&gt;&lt;code&gt;all&lt;/code&gt; specifies we want to target all hosts in the hosts file, we
could just as easily have used &lt;code&gt;routers&lt;/code&gt; to only target the routers group, if we
had multiple groups&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-m raw&lt;/code&gt; specifies the raw module&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-a &amp;quot;executable=&#39;&#39; sh run | inc hostname&amp;quot;&lt;/code&gt; specifies the module&amp;rsquo;s arguments,
the command we want to send; &lt;code&gt;sh run | inc hostname&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-i hosts&lt;/code&gt; specifies the inventory file we want to use&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And we get the following output:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;router-one | SUCCESS | rc=0 &amp;gt;&amp;gt;
hostname router-one
Connection to 192.168.0.1 closed by remote host.


router-two | SUCCESS | rc=0 &amp;gt;&amp;gt;
hostname router-two
Connection to 192.168.0.2 closed by remote host.


router-three | SUCCESS | rc=0 &amp;gt;&amp;gt;
hostname router-three
Connection to 192.168.0.3 closed by remote host.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Success, excellent! We get back the hostname of each router, in a second or so.
You may have noticed the command sent to the module includes &lt;code&gt;executable=&#39;&#39;&lt;/code&gt;,
this is because the raw module is expecting to encounter bash on a server,
rather than the IOS command line. If we run it without this we get the following
error:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;router-three | SUCCESS | rc=0 &amp;gt;&amp;gt;
Line has invalid autocommand &amp;quot;/bin/sh -c &#39;sh run | inc hostname &amp;amp;&amp;amp; sleep 0&#39;&amp;quot;Connection to 192.168.0.3 closed by remote host.


router-one | SUCCESS | rc=0 &amp;gt;&amp;gt;
Line has invalid autocommand &amp;quot;/bin/sh -c &#39;sh run | inc hostname &amp;amp;&amp;amp; sleep 0&#39;&amp;quot;

router-two | SUCCESS | rc=0 &amp;gt;&amp;gt;
Line has invalid autocommand &amp;quot;/bin/sh -c &#39;sh run | inc hostname &amp;amp;&amp;amp; sleep 0&#39;&amp;quot;Connection to 192.168.0.2 closed by remote host.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There was &lt;a href=&#34;https://github.com/ansible/ansible-modules-core/issues/3332&#34;&gt;an issue&lt;/a&gt;
on the Ansible repo, so I&amp;rsquo;m not sure if this is something that will change in
the future. Anyway, we won&amp;rsquo;t be using the &lt;code&gt;raw&lt;/code&gt; module much, so it doesn&amp;rsquo;t really matter.
This is a quick way to get facts off your devices, and you can send configuration
changes this way if you really want. It&amp;rsquo;s always worth messing around on a lab
router that doesn&amp;rsquo;t support critical company infrastructure, if you can, but
Ansible has a better way to design and implement repeatable tasks, called
&lt;em&gt;Playbooks&lt;/em&gt;, which I&amp;rsquo;ll look at in another post.&lt;/p&gt;

&lt;p&gt;Some further interesting sources of information:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.ansible.com/webinars-training/automating-your-network&#34;&gt;Ansible Network Automation Webinar&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pynet.twb-tech.com/blog/automation/cisco-ios.html&#34;&gt;Kirk Byers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jedelman.com/home/network-automation-with-ansible-dynamically-configuring-interface-descriptions/&#34;&gt;Jason Edelman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://networklore.com/ansible-device-versions/&#34;&gt;Patrick Ogenstad&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://networkop.github.io/blog/2015/06/24/ansible-intro/&#34;&gt;Michael Kashin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://packetpushers.net/ansible-cisco-snmp/&#34;&gt;Packet Pushers&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Songs to Code to: Talk Is Cheap</title>
      <link>/post/2016/07/chet-faker-talk-is-cheap/</link>
      <pubDate>Tue, 26 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016/07/chet-faker-talk-is-cheap/</guid>
      <description>&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/aP_-P_BS6KY&#34; frameborder=&#34;0&#34;&gt; &lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Notes on Elixir: Templating with EEx</title>
      <link>/post/2016/02/notes-on-elixir-templating-with-eex/</link>
      <pubDate>Fri, 12 Feb 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016/02/notes-on-elixir-templating-with-eex/</guid>
      <description>&lt;p&gt;EEx is to Elixir what &lt;a href=&#34;http://jinja.pocoo.org/&#34;&gt;Jinja&lt;/a&gt; is to Python.  It enables the use of Elixir
code inside strings and files.  It&amp;rsquo;s used extensively in the Phoenix framework for HTML
templates, and recently I&amp;rsquo;ve started to use it to replace my Python scripts for generating
Cisco config files.&lt;/p&gt;

&lt;p&gt;Like most templating engines EEx has various tags it uses for marking up your
template:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;% content %&amp;gt;&lt;/code&gt; - Contains Elixir code, but won&amp;rsquo;t output anything to the template&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;%= content %&amp;gt;&lt;/code&gt; - That extra &lt;code&gt;=&lt;/code&gt; in there means the result of any Elixir inside the tag
will appear in the template.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;%% content %&amp;gt;&lt;/code&gt; &amp;amp; &lt;code&gt;&amp;lt;%%= content %&amp;gt;&lt;/code&gt; - These are quotations, returning, rather
than evaluating the contents.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;%# content %&amp;gt;&lt;/code&gt; - Comments, discarded in evaluation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These tags, in the context of a template are evaluated by one of 4 functions, or
2 macros:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;compile_file/2&lt;/code&gt; &amp;amp; &lt;code&gt;compile_string/2&lt;/code&gt; - These generate a &lt;em&gt;quoted expression&lt;/em&gt; from
a file or a string respectively, essentially creating an Abstract Syntax Tree
representation of the input.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;eval_file/3&lt;/code&gt; &amp;amp; &lt;code&gt;eval_string&lt;/code&gt; - Evaluate the given file or string respectively,
generating output based on the given template and variable bindings.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;function_from_file/5&lt;/code&gt; &amp;amp; &lt;code&gt;function_from_string/5&lt;/code&gt; - These macros generate
functions from the given file or string respectively, along with any arguments. These
functions can then be used in other code to generate output from the given
template and arguments.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So, examples;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;iex&amp;gt; string = &amp;quot;Hello, &amp;lt;%= name %&amp;gt;!&amp;quot;
&amp;quot;Hello, &amp;lt;%= name %&amp;gt;!&amp;quot;
iex&amp;gt; EEx.eval_string string, [name: &amp;quot;World&amp;quot;]
&amp;quot;Hello, World!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, &lt;code&gt;string&lt;/code&gt; is bound to a simple template, with a variable name inside the
tag.  We then evaluate the string, passing in a keyword list of arguments, and
hey presto, in our output the &lt;code&gt;name&lt;/code&gt; variable has been replaced! Not so
different from string interpolation really. Except we have access to all of
Elixir inside the tag;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;iex&amp;gt; template = &amp;quot;&amp;lt;%= if n &amp;gt; 100 do %&amp;gt; \
...&amp;gt; &amp;lt;%= n %&amp;gt; is greater than 100. \
...&amp;gt; &amp;lt;% else %&amp;gt; \
...&amp;gt; &amp;lt;%= n %&amp;gt; is lower than 100. \
...&amp;gt; &amp;lt;% end %&amp;gt;&amp;quot;
&amp;quot;&amp;lt;%= if n &amp;gt; 100 do %&amp;gt;n is greater than 100.&amp;lt;% else %&amp;gt;n is lower than 100.&amp;lt;% end %&amp;gt;&amp;quot;
iex&amp;gt; EEx.eval_string template, [n: 10]
&amp;quot; 10 is lower than 100. &amp;quot;
iex&amp;gt; EEx.eval_string template, [n: 101]
&amp;quot; 101 is greater than 100. &amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice the &lt;code&gt;&amp;lt;% %&amp;gt;&lt;/code&gt; tags for the &lt;code&gt;else&lt;/code&gt; &amp;amp; &lt;code&gt;end&lt;/code&gt; of the &lt;code&gt;if&lt;/code&gt; statement. The
content of these tags is evaluated, but never returned to the template. We&amp;rsquo;ll
get a compiler warning if we include an unused variable in there, or an error if
we have an unbound variable, otherwise any results just won&amp;rsquo;t appear in our
final output;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;iex&amp;gt; string = &amp;quot;Hello, &amp;lt;% name %&amp;gt;!&amp;quot;
&amp;quot;Hello, &amp;lt;% name %&amp;gt;!&amp;quot;
iex&amp;gt; EEx.eval_string string, [name: &amp;quot;World&amp;quot;]
&amp;quot;Hello, !&amp;quot;
nofile:1: warning: variable name in code block has no effect as it is never returned (remove the variable or assign it to _ to avoid warnings)
iex&amp;gt; EEx.eval_string string
** (CompileError) nofile:1: undefined function name/0
    (elixir) expanding macro: Kernel.&amp;lt;&amp;gt;/2
             nofile:1: (file)
iex&amp;gt; string = &amp;quot;Hello, &amp;lt;% 2 + 2 %&amp;gt;!&amp;quot;
iex&amp;gt; EEx.eval_string string
&amp;quot;Hello, !&amp;quot;
iex&amp;gt; string = &amp;quot;Hello, &amp;lt;%= 2 + 2 %&amp;gt;!&amp;quot;
iex&amp;gt; EEx.eval_string string
&amp;quot;Hello, 4!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The quotation tag is interesting, it&amp;rsquo;s almost like a raw string indicator,
telling EEx to not evaluate the tag.  I&amp;rsquo;ve not had cause to use it yet, but I
can see it might be useful for some kind of two-stage templating;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;iex&amp;gt; string = &amp;quot;Hello, &amp;lt;%% 2 + 2 %&amp;gt;!&amp;quot;
&amp;quot;Hello, &amp;lt;%% 2 + 2 %&amp;gt;!&amp;quot;
iex&amp;gt; EEx.eval_string string
&amp;quot;Hello, &amp;lt;% 2 + 2 %&amp;gt;!&amp;quot;
iex&amp;gt; string = &amp;quot;Hello, &amp;lt;%%= 2 + 2 %&amp;gt;!&amp;quot;
&amp;quot;Hello, &amp;lt;%%= 2 + 2 %&amp;gt;!&amp;quot;
iex&amp;gt; output = EEx.eval_string string
&amp;quot;Hello, &amp;lt;%= 2 + 2 %&amp;gt;!&amp;quot;
iex&amp;gt; EEx.eval_string output
&amp;quot;Hello, 4!&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When first evaluated the quotation tag becomes a regular tag, which can then be
evaluated again if necessary.&lt;/p&gt;

&lt;p&gt;So, we&amp;rsquo;ve seen &lt;code&gt;eval_string/2&lt;/code&gt; in the previous examples. &lt;code&gt;eval_file/2&lt;/code&gt; is much
the same but takes a file as it&amp;rsquo;s template rather than a string;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;iex&amp;gt; File.write(&amp;quot;example.txt&amp;quot;, &amp;quot;Hello, &amp;lt;%= name %&amp;gt;!&amp;quot;)
:ok
iex(52)&amp;gt; EEx.eval_file &amp;quot;example.txt&amp;quot;, [name: &amp;quot;World&amp;quot;]
&amp;quot;Hello, World!&amp;quot;
iex(53)&amp;gt; File.read(&amp;quot;example.txt&amp;quot;)
{:ok, &amp;quot;Hello, &amp;lt;%= name %&amp;gt;!&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the original template file has not been changed, EEx has just created
a new output from the combination of the template and the given variable
bindings. Also, the template file here was just a &lt;code&gt;.txt&lt;/code&gt; file rather than a
&lt;code&gt;.eex&lt;/code&gt; file. The template file isn&amp;rsquo;t required to be a &lt;code&gt;.eex&lt;/code&gt; file, but
convention is to combine the two extensions, for instance &lt;code&gt;.txt.eex&lt;/code&gt; or
&lt;code&gt;.html.eex&lt;/code&gt;, as this &lt;em&gt;&amp;lsquo;preserves its intent as a template, and also denotes what
it&amp;rsquo;s outputting&amp;rsquo;&lt;/em&gt;, and helps with syntax highlighting too. (thanks asonge &amp;amp;
ciastek)&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;compile_string/2&lt;/code&gt; &amp;amp; &lt;code&gt;compile_file/2&lt;/code&gt; functions are fairly straightforward,
generating AST. I&amp;rsquo;ve had to put this in a gist, &lt;a href=&#34;https://gist.github.com/bordeltabernacle/24fec2e0d55b7937a0d5&#34;&gt;here&lt;/a&gt;, as it screws with
Jekyll&amp;rsquo;s liquid tags, jeez!&lt;/p&gt;

&lt;p&gt;Alhough I&amp;rsquo;ve had no use for them myself, they are actually used within the
&lt;code&gt;eval_string/3&lt;/code&gt; &amp;amp; &lt;code&gt;eval_file/3&lt;/code&gt; functions.&lt;/p&gt;

&lt;p&gt;Last, but by no means least, are the &lt;code&gt;function_from_file/5&lt;/code&gt; &amp;amp;
&lt;code&gt;function_from_string/5&lt;/code&gt; macros. These basically do what they sound like they
do; create a function from a file or string template for use elsewhere. I&amp;rsquo;ll
illustrate this with an example.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s say we have a very large number of devices that we need to generate
individual configurations for, in my experience this would be for Cisco switches
and routers.  We create a template, &amp;ldquo;base_example.conf.eex&amp;rdquo;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;hostname &amp;lt;%= hostname %&amp;gt;
no logging console
username &amp;lt;%= user_name %&amp;gt; secret &amp;lt;%= user_password %&amp;gt;
aaa new-model
aaa authentication login default local
clock timezone GMT 0 0
clock summer-time BST recurring last Sun Mar 1:00 last Sun Oct 1:00
ip name-server &amp;lt;%= name_server %&amp;gt;
no ip http server
no ip http secure-server
ntp server &amp;lt;%= ntp_server %&amp;gt;
ntp update-calendar
!
&amp;lt;%= for [id, name] &amp;lt;- vlans do %&amp;gt;
vlan &amp;lt;%= id %&amp;gt;
  name &amp;lt;%= name %&amp;gt;
&amp;lt;% end %&amp;gt;
!
interface 0
ip address &amp;lt;%= ip_address %&amp;gt;
no shutdown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is a very basic template, with some tags expecting variables. There is also
a list comprehension towards the end, this expects &lt;code&gt;vlans&lt;/code&gt; to be a list of 2
element lists, that it will then map over, creating as many vlan/name pairs as
necessary.  This is really useful for situations where you might have a variable
amount of input data, saving you from having to adjust the template each time
according to, in this case, the number of vlans.&lt;/p&gt;

&lt;p&gt;So, I&amp;rsquo;ve saved this template in a &lt;em&gt;templates&lt;/em&gt; directory. Let&amp;rsquo;s dip into iex and
see what we can do:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;iex&amp;gt; defmodule Render do
...&amp;gt;   require EEx
...&amp;gt;   EEx.function_from_file(:def, :base,
...&amp;gt;     Path.expand(&amp;quot;./templates/base_example.conf.eex&amp;quot;),
...&amp;gt;     [:hostname, :ip_address, :name_server, :ntp_server,
...&amp;gt;      :user_name, :user_password, :vlans])
...&amp;gt; end
{:module, Render,
 &amp;lt;&amp;lt;70, 79, 82, 49, 0, 0, 14, 184, 66, 69, 65, 77, 69, 120, 68, 99, 0, 0, 1, 26, 131, 104, 2, 100, 0, 14, 101, 108, 105, 120, 105, 114, 95, 100, 111, 99, 115, 95, 118, 49, 108, 0, 0, 0, 4, 104, 2, ...&amp;gt;&amp;gt;,
 {:base, 7}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here, we start a new module called Render, &lt;code&gt;require EEx&lt;/code&gt;, and then use the
&lt;code&gt;function_from_file/5&lt;/code&gt; macro, passing it the type of function we want (&lt;code&gt;def&lt;/code&gt; or
&lt;code&gt;defp&lt;/code&gt;), the name of the function, the template we&amp;rsquo;re using, and our arguments.&lt;/p&gt;

&lt;p&gt;We now have a function we can use to render our template:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;iex&amp;gt; Render.base(
...&amp;gt;   &amp;quot;ABC20&amp;quot;,
...&amp;gt;   &amp;quot;192.168.1.20&amp;quot;,
...&amp;gt;   &amp;quot;8.8.8.8&amp;quot;,
...&amp;gt;   &amp;quot;uk.pool.ntp.org&amp;quot;,
...&amp;gt;   &amp;quot;admin&amp;quot;,
...&amp;gt;   &amp;quot;password&amp;quot;,
...&amp;gt;   [[&amp;quot;999&amp;quot;, &amp;quot;NATIVE&amp;quot;], [&amp;quot;100&amp;quot;, &amp;quot;VOICE&amp;quot;], [&amp;quot;101&amp;quot;, &amp;quot;DATA 1&amp;quot;], [&amp;quot;102&amp;quot;, &amp;quot;DATA 2&amp;quot;], [&amp;quot;103&amp;quot;, &amp;quot;DATA 3&amp;quot;]]
...&amp;gt; )
&amp;quot;hostname ABC20
no logging console
username admin secret password
aaa new-model
aaa authentication login default local
clock timezone GMT 0 0
clock summer-time BST recurring last Sun Mar 1:00 last Sun Oct 1:00
ip name-server 8.8.8.8
no ip http server
no ip http secure-server
ntp server uk.pool.ntp.org
ntp update-calendar
!
vlan 999
  name NATIVE

vlan 100
  name VOICE

vlan 101
  name DATA 1

vlan 102
  name DATA 2

vlan 103
  name DATA 3
!
interface 0
ip address 192.168.1.20
no shutdown&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We pass our device variables in to our new function, notice the list of lists
for &lt;code&gt;vlans&lt;/code&gt;, and out pops our rendered template, including all our vlans,
lovely. Now, obviously, this isn&amp;rsquo;t particularly practical when dealing with
thousands of devices. But what you have is a function you can use as part of a
module that can read data from a csv file, I&amp;rsquo;ve found &lt;a href=&#34;https://github.com/CargoSense/ex_csv&#34;&gt;ex_csv&lt;/a&gt; to be pretty
good for this, and map over it, applying your new rendering function, and then
writing the results to a new file.&lt;/p&gt;

&lt;p&gt;But there&amp;rsquo;s more. Passing in that list of data is pretty cumbersome, it&amp;rsquo;d be
nice if we could just define a single variable that represents a map, and let
the template grab what it needs from that. First, we need to change our template
to look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;hostname &amp;lt;%= @hostname %&amp;gt;
no logging console
username &amp;lt;%= @user_name %&amp;gt; secret &amp;lt;%= @user_password %&amp;gt;
aaa new-model
aaa authentication login default local
clock timezone GMT 0 0
clock summer-time BST recurring last Sun Mar 1:00 last Sun Oct 1:00
ip name-server &amp;lt;%= @name_server %&amp;gt;
no ip http server
no ip http secure-server
ntp server &amp;lt;%= @ntp_server %&amp;gt;
ntp update-calendar
!
&amp;lt;%= for [id, name] &amp;lt;- @vlans do %&amp;gt;
vlan &amp;lt;%= id %&amp;gt;
  name &amp;lt;%= name %&amp;gt;
&amp;lt;% end %&amp;gt;
!
interface 0
ip address &amp;lt;%= @ip_address %&amp;gt;
no shutdown
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We&amp;rsquo;re now using EEx&amp;rsquo;s &lt;code&gt;@&lt;/code&gt; macro, which enables us to grab data out of a map or
keyword list.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll update our &lt;code&gt;Render.base&lt;/code&gt; function, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;iex&amp;gt; defmodule Render do
...&amp;gt;   require EEx
...&amp;gt;   EEx.function_from_file(:def, :base,
...&amp;gt;     Path.expand(&amp;quot;./templates/base_example.conf.eex&amp;quot;),
...&amp;gt;     [:assigns])
...&amp;gt; end
iex: warning: redefining module Render
{:module, Render,
 &amp;lt;&amp;lt;70, 79, 82, 49, 0, 0, 15, 8, 66, 69, 65, 77, 69, 120, 68, 99, 0, 0, 0, 151, 131, 104, 2, 100, 0, 14, 101, 108, 105, 120, 105, 114, 95, 100, 111, 99, 115, 95, 118, 49, 108, 0, 0, 0, 4, 104, 2, ...&amp;gt;&amp;gt;,
 {:base, 1}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;and create a map of our data:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;iex&amp;gt; device = %{hostname: &amp;quot;ABC20&amp;quot;,
...&amp;gt;   ip_address: &amp;quot;192.168.1.20&amp;quot;,
...&amp;gt;   name_server: &amp;quot;8.8.8.8&amp;quot;,
...&amp;gt;   ntp_server: &amp;quot;uk.pool.ntp.org&amp;quot;,
...&amp;gt;   user_name: &amp;quot;admin&amp;quot;,
...&amp;gt;   user_password: &amp;quot;password&amp;quot;,
...&amp;gt;   vlans: [[&amp;quot;999&amp;quot;, &amp;quot;NATIVE&amp;quot;], [&amp;quot;100&amp;quot;, &amp;quot;VOICE&amp;quot;], [&amp;quot;101&amp;quot;, &amp;quot;DATA 1&amp;quot;],
...&amp;gt;    [&amp;quot;102&amp;quot;, &amp;quot;DATA 2&amp;quot;], [&amp;quot;103&amp;quot;, &amp;quot;DATA 3&amp;quot;]]}
%{hostname: &amp;quot;ABC20&amp;quot;, ip_address: &amp;quot;192.168.1.20&amp;quot;, name_server: &amp;quot;8.8.8.8&amp;quot;,
  ntp_server: &amp;quot;uk.pool.ntp.org&amp;quot;, user_name: &amp;quot;admin&amp;quot;, user_password: &amp;quot;password&amp;quot;,
  vlans: [[&amp;quot;999&amp;quot;, &amp;quot;NATIVE&amp;quot;], [&amp;quot;100&amp;quot;, &amp;quot;VOICE&amp;quot;], [&amp;quot;101&amp;quot;, &amp;quot;DATA 1&amp;quot;],
   [&amp;quot;102&amp;quot;, &amp;quot;DATA 2&amp;quot;], [&amp;quot;103&amp;quot;, &amp;quot;DATA 3&amp;quot;]]}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, let&amp;rsquo;s see if it works&amp;hellip;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;iex&amp;gt; Render.base(device)
&amp;quot;hostname ABC20
no logging console
username admin secret password
aaa new-model
aaa authentication login default local
clock timezone GMT 0 0
clock summer-time BST recurring last Sun Mar 1:00 last Sun Oct 1:00
ip name-server 8.8.8.8
no ip http server
no ip http secure-server
ntp server uk.pool.ntp.org
ntp update-calendar
!
vlan 999
  name NATIVE

vlan 100
  name VOICE

vlan 101
  name DATA 1

vlan 102
  name DATA 2

vlan 103
  name DATA 3
  !
interface 0
ip address 192.168.1.20
no shutdown&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahh, that&amp;rsquo;s much easier, and cleaner, super. One more thing before I go, I
really liked with Python&amp;rsquo;s Jinja how you were able to split up your templates,
much like Phoenix does. We don&amp;rsquo;t have access to Phoenix&amp;rsquo;s &lt;code&gt;render&lt;/code&gt; function, but
we can mimic it.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll start by pulling out the vlans section into it&amp;rsquo;s own template,
&lt;code&gt;vlans.conf.eex&lt;/code&gt;, replacing it with this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;&amp;lt;%= if Map.has_key?(assigns, :vlans) do %&amp;gt;
  &amp;lt;%= vlans(@vlans) %&amp;gt;
&amp;lt;% end %&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There&amp;rsquo;s a couple of things going on here. First, we&amp;rsquo;re going to check the map of
data to see if it has a &lt;code&gt;vlans&lt;/code&gt; key. We do this, so that if we have a device
that doesn&amp;rsquo;t have any vlans it&amp;rsquo;ll just skip this, rather than break the program.
If we do have a &lt;code&gt;vlans&lt;/code&gt; key, we&amp;rsquo;re going to pass it to a new function called
&lt;code&gt;vlans&lt;/code&gt;, that will be in the Render module.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s have a look at it:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;iex&amp;gt; defmodule Render do
...&amp;gt;   require EEx
...&amp;gt;
...&amp;gt;   EEx.function_from_file(:def, :base,
...&amp;gt;                          Path.expand(&amp;quot;./templates/base_example.conf.eex&amp;quot;),
...&amp;gt;                          [:assigns])
...&amp;gt;
...&amp;gt;   EEx.function_from_file(:def, :vlans,
...&amp;gt;                          Path.expand(&amp;quot;./templates/vlans.conf.eex&amp;quot;),
...&amp;gt;                          [:vlans])
...&amp;gt; end
iex:15: warning: redefining module Render
{:module, Render,
 &amp;lt;&amp;lt;70, 79, 82, 49, 0, 0, 17, 236, 66, 69, 65, 77, 69, 120, 68, 99, 0, 0, 0, 202, 131, 104, 2, 100, 0, 14, 101, 108, 105, 120, 105, 114, 95, 100, 111, 99, 115, 95, 118, 49, 108, 0, 0, 0, 4, 104, 2, ...&amp;gt;&amp;gt;,
 {:vlans, 1}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We redefine our &lt;code&gt;Render&lt;/code&gt; module, and call our &lt;code&gt;Render.base&lt;/code&gt; function again:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;iex(16)&amp;gt; Render.base(device)
&amp;quot;hostname ABC20
no logging console
username admin secret password
aaa new-model
aaa authentication login default local
clock timezone GMT 0 0
clock summer-time BST recurring last Sun Mar 1:00 last Sun Oct 1:00
ip name-server 8.8.8.8
no ip http server
no ip http secure-server
ntp server uk.pool.ntp.org
ntp update-calendar
!

vlan 999
  name NATIVE

vlan 100
  name VOICE

vlan 101
  name DATA 1

vlan 102
  name DATA 2

vlan 103
  name DATA 3
  !
interface 0
ip address 192.168.1.20
no shutdown&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And, once again, we easily render our template. So, this enables us to build out
a hierarchy of templates to cover all possibilities of data input we may have.
Which is pretty cool if you ask me. It&amp;rsquo;s certainly going to make my job easier.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Sam Chatmon: Sittin&#39; On Top Of The World</title>
      <link>/post/2016/01/sam-chatmon-sittin-on-top-of-the-world/</link>
      <pubDate>Fri, 22 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016/01/sam-chatmon-sittin-on-top-of-the-world/</guid>
      <description>&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/ueEQKZcXfjc&#34; frameborder=&#34;0&#34;&gt; &lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Notes on Elixir: Bodyless Function Clauses</title>
      <link>/post/2016/01/notes-on-elixir-bodyless-functions/</link>
      <pubDate>Wed, 13 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016/01/notes-on-elixir-bodyless-functions/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;def func(argument)
# NOTHING TO SEE HERE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A function head without a body clause? What&amp;rsquo;s the point in that, huh?&lt;/p&gt;

&lt;p&gt;The bodyless function clause is something I&amp;rsquo;ve only come across recently, one of
those things that I think I probably read about at some point but didn&amp;rsquo;t
register until I &lt;a href=&#34;https://github.com/elixir-lang/elixir/pull/4109/files#r48349021&#34;&gt;submitted a pull request&lt;/a&gt;. I&amp;rsquo;ve not been able to find out
much about them, but here&amp;rsquo;s a quick rundown of when you might see a bodyless
function clause.&lt;/p&gt;

&lt;p&gt;EDIT(14/01/16): I&amp;rsquo;ve added &lt;em&gt;Protocols&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;As far as I know, the bodyless function clause is only something used within
Elixir &amp;amp; Erlang, and possibly Prolog. The &lt;a href=&#34;http://www.erlang.org/doc/reference_manual/functions.html&#34;&gt;Erlang docs&lt;/a&gt; give an interesting
explanation of what happens when a function is called.  This explanation hints
at the separation of the head and body of functions and I believe applies to
Elixir as well.&lt;/p&gt;

&lt;p&gt;This explanation breaks functions up into the head and body, where the head &lt;em&gt;&amp;ldquo;consists
of the function name, an argument list, and an optional guard sequence beginning
with the keyword when&amp;rdquo;&lt;/em&gt;, and the body &lt;em&gt;&amp;ldquo;consists of a sequence of expressions&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;When a function is called, the function code is located, and the function clauses
are checked in turn to find one where &lt;em&gt;&amp;ldquo;the patterns in the clause head can be
successfully matched against the given arguments&amp;rdquo;&lt;/em&gt;, and &lt;em&gt;&amp;ldquo;the guard sequence, if
any, is true&amp;rdquo;&lt;/em&gt;.  It&amp;rsquo;s only if a function head corresponds to this
that the function body is then evaluated.  This gives the impression of the head
and body being separate entities, the head being a kind of control mechanism
that doesn&amp;rsquo;t necessarily require a body.&lt;/p&gt;

&lt;p&gt;So, what is this useful for?  The three reasons I know of for using a bodyless
function clause in Elixir are &lt;a href=&#34;https://github.com/elixir-lang/elixir/blob/master/lib/elixir/pages/Writing%20Documentation.md#function-arguments&#34;&gt;documentation&lt;/a&gt;, &lt;a href=&#34;http://elixir-lang.org/getting-started/modules.html#default-arguments&#34;&gt;default arguments&lt;/a&gt;
and &lt;a href=&#34;http://elixir-lang.org/getting-started/protocols.html&#34;&gt;protocols&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The Elixir compiler infers function argument names from the code. If the
argument name is not explicit, for instance in the case of a pattern match on a
data structure, this may sometimes result in something you don&amp;rsquo;t want. If so, you
can use a bodyless function to define the name you want the argument to have,
the name that would be used in the function&amp;rsquo;s documentation, using &lt;a href=&#34;https://github.com/elixir-lang/ex_doc&#34;&gt;ExDocs&lt;/a&gt; for example.&lt;/p&gt;

&lt;p&gt;The compiler will infer the argument name for &lt;a href=&#34;http://elixir-lang.org/docs/stable/elixir/HashDict.html#size/1&#34;&gt;this function&lt;/a&gt; as &lt;code&gt;hash_dict&lt;/code&gt;;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;def size(%HashDict{size: size}) do
  size
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we would rather it was &lt;code&gt;dict&lt;/code&gt; we could add in an extra function head:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;def size(dict)

def size(%HashDict{size: size}) do
  size
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are including default arguments for a function with multiple clauses you
have to declare them in a separate function head:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defmodule Lorem do
  def ipsum(size, type \\ :paragraph, style \\ :lorem_ipsum)

  def ipsum(size, :paragraph, style), do: ...
  def ipsum(size, :sentence, style), do: ...
  def ipsum(size, :word, style), do: ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this very basic example there are 3 function clauses that have a body, and
one bodyless function that defines the defult arguments for these function
clauses.&lt;/p&gt;

&lt;p&gt;My knowledge of protocols is very limited, so I&amp;rsquo;m going to leave a deeper
explanation of them to a later post. What I do know is that a protocol is
defined with a bodyless function, like so:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;defprotocol Valid do
  @doc &amp;quot;Returns true if data is considered nominally valid&amp;quot;
  def valid?(data)
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A complete complete function with the same name is then expected, by the
protocol, for each data type you want to implement it for.  In this case, for
each data type you want to test for validity.&lt;/p&gt;

&lt;p&gt;So, there you go, the function head, a mechanism in it&amp;rsquo;s own right, separate from
the main function body.  If you know of any other uses of the bodyless function
please do let me know.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Notes on Elixir: Upgrading to/Installing v1.2 on Ubuntu</title>
      <link>/post/2016/01/notes-on-elixir-upgrading-to-installing-v12-on-ubuntu/</link>
      <pubDate>Wed, 06 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016/01/notes-on-elixir-upgrading-to-installing-v12-on-ubuntu/</guid>
      <description>&lt;p&gt;&lt;strong&gt;EDIT:&lt;/strong&gt; Erlang solutions has
&lt;a href=&#34;https://twitter.com/ErlangSolutions/status/685138290635333632&#34;&gt;now updated&lt;/a&gt;
their Elixir package so you should be able to install/upgrade to v1.2 with
&lt;code&gt;apt-get&lt;/code&gt; now.  Thankyou &lt;a href=&#34;https://www.erlang-solutions.com/&#34;&gt;Erlang Solutions&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Elixir recently got bumped up to &lt;a href=&#34;http://elixir-lang.org/blog/2016/01/03/elixir-v1-2-0-released/&#34;&gt;version 1.2&lt;/a&gt;.  Installing Elixir on
Ubuntu requires a package from &lt;a href=&#34;https://www.erlang-solutions.com/&#34;&gt;Erlang Solutions&lt;/a&gt; which hasn&amp;rsquo;t yet been
updated. Therefore upgrading to v1.2 doesn&amp;rsquo;t yet work with &lt;code&gt;apt-get&lt;/code&gt;.  Instead
you have to compile from source, which I just learnt how to do with some help
from the elixir-lang IRC channel.  Here&amp;rsquo;s how.&lt;/p&gt;

&lt;p&gt;Open up your terminal, &lt;code&gt;git clone&lt;/code&gt; the Elixir repo, checkout v1.2, test &amp;amp; make:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/elixir-lang/elixir.git
cd elixir/
git checkout v1.2
make clean test
sudo make install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;check the version:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;elixir -v
Erlang/OTP 18 [erts-7.2] [source] [64-bit] [smp:2:2] [async-threads:10] [kernel-poll:false]

Elixir 1.2.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And there you go.  This is on 14.04.1 btw.&lt;/p&gt;

&lt;p&gt;As I mentioned this was from the kind folk that help people like me on IRC,
specifically Nicd- &amp;amp; Gazler, so, thankyou.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Notes on Elixir: Pattern-Matching Maps</title>
      <link>/post/2016/01/notes-on-elixir-pattern-matching-maps/</link>
      <pubDate>Mon, 04 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/2016/01/notes-on-elixir-pattern-matching-maps/</guid>
      <description>

&lt;p&gt;Following on from my &lt;a href=&#34;https://bordeltabernacle.github.io/2015/12/31/notes-on-elixir-pattern-matching.html&#34;&gt;last post&lt;/a&gt; about pattern-matching, &lt;code&gt;maps&lt;/code&gt;, the main
key-value store in Elixir, have an interesting capability that sets them apart
from other data structures with regards to pattern-matching.&lt;/p&gt;

&lt;p&gt;A &lt;code&gt;map&lt;/code&gt; can actually pattern-match on just a subset of a value. The key(s) in
the pattern have to exist in the match, but the two structures don&amp;rsquo;t have to
mirror each other in the same way a &lt;code&gt;list&lt;/code&gt; or a &lt;code&gt;tuple&lt;/code&gt; has to.  For example:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;iex(1)&amp;gt; [a, b] = [1, 2, 3]
** (MatchError) no match of right hand side value: [1, 2, 3]

iex(1)&amp;gt; {a, b} = {1, 2, 3}
** (MatchError) no match of right hand side value: {1, 2, 3}

iex(1)&amp;gt; %{:a =&amp;gt; one} = %{:a =&amp;gt; 1, :b =&amp;gt; 2, :c =&amp;gt;3}
%{a: 1, b: 2, c: 3}
iex(2)&amp;gt; one
1
iex(3)&amp;gt; %{:a =&amp;gt; one, :c =&amp;gt; three} = %{:a =&amp;gt; 1, :b =&amp;gt; 2, :c =&amp;gt;3}
%{a: 1, b: 2, c: 3}
iex(4)&amp;gt; three
3
iex(5)&amp;gt; one
1
iex(6)&amp;gt; %{} = %{:a =&amp;gt; 1, :b =&amp;gt; 2, :c =&amp;gt;3}
%{a: 1, b: 2, c: 3}
iex(7)&amp;gt; %{:d =&amp;gt; four} = %{:a =&amp;gt; 1, :b =&amp;gt; 2, :c =&amp;gt;3}
** (MatchError) no match of right hand side value: %{a: 1, b: 2, c: 3}

iex(8)&amp;gt; %{:a =&amp;gt; one, :d =&amp;gt; four} = %{:a =&amp;gt; 1, :b =&amp;gt; 2, :c =&amp;gt;3}
** (MatchError) no match of right hand side value: %{a: 1, b: 2, c: 3}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see that neither the &lt;code&gt;list&lt;/code&gt; nor the &lt;code&gt;tuple&lt;/code&gt; matches if the data
structure of the pattern is different to the data structure of the match, namely
the size.  Whereas this is not the case for the &lt;code&gt;map&lt;/code&gt;.  Because the key is
present in both the pattern and the match then the match is successful,
regardless of the different sizes of the pattern and the match.  An empty
&lt;code&gt;map&lt;/code&gt; will also match.&lt;/p&gt;

&lt;p&gt;However the match will not be successful if the key in the pattern is not in the
match. This is also the case even if there are matching keys. So any key used in
the pattern has to be present in the match.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll see this used extensively in the &lt;a href=&#34;http://www.phoenixframework.org/&#34;&gt;Phoenix Framework&lt;/a&gt; when dealing
with the parameters passed to a function.  The function is able to pick out
of the parameters only those pieces of data it needs.&lt;/p&gt;

&lt;p&gt;Here we have a function that creates a new user:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;def create(conn, %{&amp;quot;user&amp;quot; =&amp;gt; user_params}) do
  # do stuff with user_params
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The map that is actually passed in as the second argument to this function is
this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;Parameters: %{&amp;quot;_csrf_token&amp;quot; =&amp;gt; &amp;quot;UR99GwILHTtzbSBUYRwmBVpdeDY/AAAA3K70jEiO9UhgPVwh+d3WYw==&amp;quot;,
              &amp;quot;_utf8&amp;quot; =&amp;gt; &amp;quot;✓&amp;quot;,
              &amp;quot;user&amp;quot; =&amp;gt; %{&amp;quot;name&amp;quot; =&amp;gt; &amp;quot;Memphis Minnie&amp;quot;,
                          &amp;quot;password&amp;quot; =&amp;gt; &amp;quot;[FILTERED]&amp;quot;,
                          &amp;quot;username&amp;quot; =&amp;gt; &amp;quot;minnie&amp;quot;}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;create&lt;/code&gt; function pattern-matches against only the &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt; key, binding the associated
value, in this case another map, to the &lt;code&gt;user_params&lt;/code&gt; variable for use within
the function. This function basically picks out the user info from the
given parameters map, discarding the rest of the data as irrelevant to its
needs.&lt;/p&gt;

&lt;p&gt;It is also possible to match against the whole map at the same time as pattern-matching
part of the map.  Let&amp;rsquo;s change the &lt;code&gt;create&lt;/code&gt; function to look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;def create(conn, parameters = %{&amp;quot;user&amp;quot; =&amp;gt; user_params}) do
  IO.inspect user_params[&amp;quot;name&amp;quot;]
  IO.inspect parameters[&amp;quot;_utf8&amp;quot;]
  # do stuff with user_params
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we can see below when we use this function that we&amp;rsquo;ve matched &lt;code&gt;parameters&lt;/code&gt;
to the Parameters map that is passed in, and &lt;code&gt;user_params&lt;/code&gt; to the the value of
the &lt;code&gt;&amp;quot;user&amp;quot;&lt;/code&gt; key in the Parameters map:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;[info] POST /users
&amp;quot;Skip James&amp;quot;
&amp;quot;✓&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interestingly, the &lt;code&gt;parameters&lt;/code&gt; pattern-match can also be written the other way around:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-elixir&#34;&gt;def create(conn, %{&amp;quot;user&amp;quot; =&amp;gt; user_params} = parameters) do
  IO.inspect user_params[&amp;quot;name&amp;quot;]
  IO.inspect parameters[&amp;quot;_utf8&amp;quot;]
  # do stuff with user_params
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is because the pattern here is actually &lt;code&gt;%{&amp;quot;user&amp;quot; =&amp;gt; user_params} = parameters&lt;/code&gt;
and the match is the Parameters map being passed in.  And when
you&amp;rsquo;re &lt;em&gt;inside a pattern&lt;/em&gt; you can also match different parts of the pattern,
binding them to different variables.  As far as I can tell, this is the more
idiomatic approach, and what you will see most often.&lt;/p&gt;

&lt;p&gt;Pattern-matching provides a really nice way to reach in and grab data out of a
&lt;code&gt;map&lt;/code&gt; key-value store.&lt;/p&gt;

&lt;h2 id=&#34;further-reading&#34;&gt;Further Reading&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/23693173/elixir-pattern-matching-works-differently-for-tuples-and-maps/23695899#23695899&#34;&gt;Elixir: pattern matching works differently for tuples and maps&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.phoenixframework.org/docs/adding-pages#section-a-new-action&#34;&gt;Phoenix Framework Getting Started Guide&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Big Bill Broonzy: Getting Older Every Day</title>
      <link>/post/2015/09/big-bill-broonzy-getting-older-every-day/</link>
      <pubDate>Fri, 25 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015/09/big-bill-broonzy-getting-older-every-day/</guid>
      <description>&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/hIWBbeUge5c&#34;frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Notes on Clojure: Keywords &amp; Symbols Confusion</title>
      <link>/post/2015/09/notes-on-clojure-keywords-symbols/</link>
      <pubDate>Fri, 25 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015/09/notes-on-clojure-keywords-symbols/</guid>
      <description>&lt;p&gt;Having not used Clojure extensively yet, or really much at all, I&amp;rsquo;m still unsure as to when to use Keywords.  So I just spent a bit of time exploring them, and subsequently touched on Symbols too.  And in writing this post confused myself further in the process.  What you have here then is not a formed explanation of either Keywords or Symbols, but observations on their behaviour. While reading this, imagine me saying &amp;lsquo;huh?&amp;rsquo; and scratching my head like Stan Laurel.&lt;/p&gt;

&lt;p&gt;Keywords are described in the &lt;a href=&#34;http://clojure.org/data_structures#Data%20Structures-Keywords&#34;&gt;Clojure docs&lt;/a&gt;, within the Data Structures section, as such:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;Keywords are symbolic identifiers that evaluate to themselves. They provide very fast equality tests. Like Symbols, they have names and optional namespaces, both of which are strings. The leading &amp;lsquo;:&amp;rsquo; is not part of the namespace or name.
Keywords implement IFn for invoke() of one argument (a map) with an optional second argument (a default value). For example (:mykey my-hash-map :none) means the same as (get my-hash-map :mykey :none).&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;And within the lein repl:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user=&amp;gt; (doc keyword)
-------------------------
clojure.core/keyword
([name] [ns name])
  Returns a Keyword with the given namespace and name.  Do not use :
  in the keyword strings, it will be added automatically.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Interestingly, on &lt;a href=&#34;https://en.wikipedia.org/wiki/Identifier&#34;&gt;Wikipedia&lt;/a&gt; identifiers are described as &lt;em&gt;&amp;ldquo;a name that identifies either a unique object or a unique class of objects&amp;rdquo;&lt;/em&gt;, which immediately makes me think of Python variables or similar.  But that&amp;rsquo;s not what these are, they don&amp;rsquo;t hold another value, they evaluate to themselves, which kinda confuses me.  Anyway, let&amp;rsquo;s get back in the lein repl and see what they&amp;rsquo;re all about.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;; create a keyword from a string using the keyword method
user=&amp;gt; (keyword &amp;quot;blues&amp;quot;)
:blues
; check what type it is
user=&amp;gt; (type :blues)
clojure.lang.Keyword
; so far I&#39;ve mostly seen keywords used as the key in
; maps, Clojure&#39;s key/value data structure
user=&amp;gt; {:a 1 :b 2 :c 3}
{:a 1, :b 2, :c 3}
user=&amp;gt; (type {:a 1 :b 2 :c 3})
clojure.lang.PersistentArrayMap
; and as the docs say we can use the keyword to get the relevant
; value from the map
user=&amp;gt; (:b {:a 1 :b 2 :c 3})
2
user=&amp;gt; (:b {:a 1 :b {:a 1 :b 2 :c 3}})
{:a 1, :b 2, :c 3}
user=&amp;gt; (:b (:b {:a 1 :b {:a 1 :b 2 :c 3}}))
2
; we can also use keywords as the values in a map
user=&amp;gt; {:a :1 :b :2}
{:a :1, :b :2}
user=&amp;gt; (:a {:a :1 :b :2})
:1
; we can use strings in place of keywords in a map
user=&amp;gt; {&amp;quot;a&amp;quot; 1 &amp;quot;b&amp;quot; 2}
{&amp;quot;a&amp;quot; 1, &amp;quot;b&amp;quot; 2}
user=&amp;gt; (type {&amp;quot;a&amp;quot; 1 &amp;quot;b&amp;quot; 2})
clojure.lang.PersistentArrayMap
user=&amp;gt; (&amp;quot;a&amp;quot; {&amp;quot;a&amp;quot; 1 &amp;quot;b&amp;quot; 2})
ClassCastException java.lang.String cannot be cast to clojure.lang.IFn  user/eval16637 (form-init7909990402899556571.clj:1)

user=&amp;gt; (get {&amp;quot;a&amp;quot; 1 &amp;quot;b&amp;quot; 2} &amp;quot;a&amp;quot;)
1
; though we have to use get here, and it&#39;s a bit uglier.
; I also get the impression it&#39;s just common expectation to use keywords
; for map keys, and that frowning will occur if we use strings.
;
; we can also define keywords with the colon
user=&amp;gt; :blues
:blues
; and using a double colon also defines the namespace
user=&amp;gt; ::blues
:user/blues
user=&amp;gt; (type ::blues)
clojure.lang.Keyword
; which is similar to this
user=&amp;gt; (keyword &amp;quot;blues&amp;quot; &amp;quot;Mississippi-Fred-McDowell&amp;quot;)
:blues/Mississippi-Fred-McDowell
user=&amp;gt; (type :blues/Mississippi-Fred-McDowell)
clojure.lang.Keyword
; though I don&#39;t think you can define the name of the namespace using
; the double colon method, and to be honest I don&#39;t yet know why you would
; do this I thought maybe it would have something to do with referencing a value
; in a different namespace, but I really don&#39;t understand this yet, I need
; to actually start building stuff in Clojure. Understanding is a constant
; cycle of learning and building and learning and building.
;
; I tried this....
user=&amp;gt; {:a 1 :b 2 :c 3}
{:a 1, :b 2, :c 3}
user=&amp;gt; (ns notuser)
nil
notuser=&amp;gt; :a
:a
notuser=&amp;gt; user/:a

CompilerException java.lang.RuntimeException: No such var: user/:a, compiling:(/tmp/form-init7909990402899556571.clj:1:6084)
notuser=&amp;gt; user/:b

CompilerException java.lang.RuntimeException: No such var: user/:b, compiling:(/tmp/form-init7909990402899556571.clj:1:6084)
notuser=&amp;gt; (ns user)
nil
user=&amp;gt; {::a 1 ::b 2 ::c 3}
{:user/a 1, :user/b 2, :user/c 3}
user=&amp;gt; (ns notuser)
nil
notuser=&amp;gt; :a
:a
notuser=&amp;gt; user/:a
CompilerException java.lang.RuntimeException: No such var: user/:a, compiling:(/tmp/form-init7909990402899556571.clj:1:6084)

notuser=&amp;gt; :user/a
:user/a
; but of course I then realised that this is just daft, because....
notuser=&amp;gt; (ns user)
nil
user=&amp;gt; :a
:a
; so many moments of stupidity along the path to enlightenment!
; Anyway just to reiterate, I don&#39;t quite get the why of all this yet
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Symbols appear to be easily confused with Keywords in Clojure.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;ldquo;Symbols are identifiers that are normally used to refer to something else. They can be used in program forms to refer to function parameters, let bindings, class names and global vars. They have names and optional namespaces, both of which are strings. Symbols can have metadata (see with-meta).
Symbols, just like Keywords, implement IFn for invoke() of one argument (a map) with an optional second argument (a default value). For example (&amp;lsquo;mysym my-hash-map :none) means the same as (get my-hash-map &amp;lsquo;mysym :none).&amp;rdquo;&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user=&amp;gt; (doc symbol)
-------------------------
clojure.core/symbol
([name] [ns name])
Returns a Symbol with the given namespace and name.

user=&amp;gt; (symbol foo)

CompilerException java.lang.RuntimeException: Unable to resolve symbol: foo in this context, compiling:(/tmp/form-init7909990402899556571.clj:1:1)
user=&amp;gt; (symbol &#39;foo)
foo
user=&amp;gt; (type (symbol &#39;foo))
clojure.lang.Symbol
user=&amp;gt; (symbol &amp;quot;foo&amp;quot;)
foo
; keywords cannot be converted to symbols
user=&amp;gt; (symbol :foo)

ClassCastException clojure.lang.Keyword cannot be cast to java.lang.String  clojure.core/symbol (core.clj:552)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can do some similar things with Symbols as we can with Keywords.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user=&amp;gt; {&#39;a 1 &#39;b 2 &#39;c 3}
{a 1, b 2, c 3}
user=&amp;gt; (type {&#39;a 1 &#39;b 2 &#39;c 3})
clojure.lang.PersistentArrayMap
user=&amp;gt; (type &#39;a)
clojure.lang.Symbol
user=&amp;gt; (&#39;a {&#39;a 1 &#39;b 2})
1
; but we can assign other values to Symbols, where we can&#39;t with Keywords.
; This comes back to the description of Keywords as
; &amp;quot;symbolic identifiers that evaluate to themselves&amp;quot;
user=&amp;gt; (eval :blues)
:blues
; evaluates to itself
user=&amp;gt; (eval blues)
CompilerException java.lang.RuntimeException: Unable to resolve symbol: blues in this context, compiling:(/tmp/form-init7909990402899556571.clj:1:1)

; we have to assign something to blues
user=&amp;gt; (def blues &amp;quot;Muddy Waters&amp;quot;)
#&#39;user/blues
user=&amp;gt; (eval blues)
&amp;quot;Muddy Waters&amp;quot;
user=&amp;gt; blues
&amp;quot;Muddy Waters&amp;quot;
user=&amp;gt; (type blues)
java.lang.String
; yet we are unable to assign anything else to a keyword
user=&amp;gt; (def :blues &amp;quot;Muddy Waters&amp;quot;)

CompilerException java.lang.RuntimeException: First argument to def must be a Symbol, compiling:(/tmp/form-init7909990402899556571.clj:1:1)
; Now I thought we could assign a value to a symbol, buuuuut...
user=&amp;gt; (def &#39;blues &amp;quot;Muddy Waters&amp;quot;)
CompilerException java.lang.RuntimeException: First argument to def must be a Symbol, compiling:(/tmp/form-init7909990402899556571.clj:1:1)
user=&amp;gt; (defn &#39;blues [a] (str a &amp;quot; got the blues&amp;quot;))

IllegalArgumentException First argument to defn must be a symbol  clojure.core/defn--4156 (core.clj:281)
user=&amp;gt; (defn blues [a] (str a &amp;quot; got the blues&amp;quot;))
#&#39;user/blues
user=&amp;gt; (blues &amp;quot;Muddy Waters&amp;quot;)
&amp;quot;Muddy Waters got the blues&amp;quot;
user=&amp;gt; &#39;blues
blues
; So when assigning a value to a Symbol you don&#39;t use the quote.
user=&amp;gt; (symbol? &#39;blues)
true
user=&amp;gt; (symbol? (quote blues))
true
user=&amp;gt; (def blues &amp;quot;Muddy Waters&amp;quot;)
#&#39;user/blues
user=&amp;gt; (symbol? blues)
false
user=&amp;gt; (symbol? &#39;blues)
true
; Here blues is false as it refers to the string &amp;quot;Muddy Waters&amp;quot;, whereas
; &#39;blues is the symbol
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keywords and Symbols are not the same thing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user=&amp;gt; (keyword? &#39;blues)
false
user=&amp;gt; (keyword? :blues)
true
user=&amp;gt; (symbol? :blues)
false
user=&amp;gt; (symbol? &#39;blues)
true
user=&amp;gt; (:a {&#39;a 1 &#39;b 2})
nil
; as keywords refer to themselves they are identical, whereas symbols are not
user=&amp;gt; (identical? :a :a)
true
user=&amp;gt; (identical? &#39;a &#39;a)
false
; even though
user=&amp;gt; (= :a :a)
true
user=&amp;gt; (= &#39;a &#39;a)
true
; which, like above, has to do with the difference between the thing itself
; and what the thing is referencing.
; Here is an example of this difference
user=&amp;gt; (def blues [&amp;quot;Blind Willie Johnson&amp;quot; &amp;quot;Muddy Waters&amp;quot; &amp;quot;Sister Gertrude Morgan&amp;quot;])
#&#39;user/blues
user=&amp;gt; blues
[&amp;quot;Blind Willie Johnson&amp;quot; &amp;quot;Muddy Waters&amp;quot; &amp;quot;Sister Gertrude Morgan&amp;quot;]
user=&amp;gt; (type blues)
clojure.lang.PersistentVector
user=&amp;gt; &#39;blues
blues
user=&amp;gt; (type &#39;blues)
clojure.lang.Symbol
; yet the Symbol refers to the underlying list, not to itself, so if we
; reference the symbol we will always get back what it refers to
user=&amp;gt; (eval &#39;blues)
[&amp;quot;Blind Willie Johnson&amp;quot; &amp;quot;Muddy Waters&amp;quot; &amp;quot;Sister Gertrude Morgan&amp;quot;]
user=&amp;gt; (eval blues)
[&amp;quot;Blind Willie Johnson&amp;quot; &amp;quot;Muddy Waters&amp;quot; &amp;quot;Sister Gertrude Morgan&amp;quot;]
user=&amp;gt; (first &#39;[&amp;quot;Blind Willie Johnson&amp;quot; &amp;quot;Muddy Waters&amp;quot; &amp;quot;Sister Gertrude Morgan&amp;quot;])
&amp;quot;Blind Willie Johnson&amp;quot;
user=&amp;gt; (first blues)
&amp;quot;Blind Willie Johnson&amp;quot;
user=&amp;gt; (type &#39;[&amp;quot;Blind Willie Johnson&amp;quot; &amp;quot;Muddy Waters&amp;quot; &amp;quot;Sister Gertrude Morgan&amp;quot;])
clojure.lang.PersistentVector
user=&amp;gt; (type blues)
clojure.lang.PersistentVector
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Keywords and Symbols can also be used within Vectors&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user=&amp;gt; [1 2 3]
[1 2 3]
user=&amp;gt; (type [1 2 3])
clojure.lang.PersistentVector
user=&amp;gt; [1 &amp;quot;one&amp;quot; &amp;quot;two&amp;quot; 3]
[1 &amp;quot;one&amp;quot; &amp;quot;two&amp;quot; 3]
user=&amp;gt; [1 :one :two 3]
[1 :one :two 3]
user=&amp;gt; [1 :one :two &#39;three 3]
[1 :one :two three 3]
user=&amp;gt; (first (rest [1 :one :two &#39;three 3]))
:one
user=&amp;gt; [&#39;one 1 :one :two &#39;three 3]
[one 1 :one :two three 3]
user=&amp;gt; (first [&#39;one 1 :one :two &#39;three 3])
one
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I also discovered that &lt;code&gt;&#39;&lt;/code&gt; &amp;amp; &lt;code&gt;&amp;quot;&lt;/code&gt; are not interchangeable as they are in other languages, due to the use of &lt;code&gt;&#39;&lt;/code&gt; to define Symbols and Lists.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;user=&amp;gt; &amp;quot;blues&amp;quot;
&amp;quot;blues&amp;quot;
user=&amp;gt; (type &amp;quot;blues&amp;quot;)
java.lang.String
user=&amp;gt; &#39;blues&#39;
blues&#39;
user=&amp;gt; (type &#39;blues&#39;)
clojure.lang.Symbol
user=&amp;gt; (str &#39;blues&#39;)
&amp;quot;blues&#39;&amp;quot;
user=&amp;gt; (str &amp;quot;blues&amp;quot;)
&amp;quot;blues&amp;quot;
user=&amp;gt; &amp;quot;:blues&amp;quot;
&amp;quot;:blues&amp;quot;
user=&amp;gt; (type &amp;quot;:blues&amp;quot;)
java.lang.String
user=&amp;gt; (type &#39;:blues&#39;)
clojure.lang.Keyword
user=&amp;gt; &#39;:blues&#39;
:blues&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The confusion is all mine, any insight is borrowed heavily from the following articles.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/1527548/why-does-clojure-have-keywords-in-addition-to-symbols?rq=1&#34;&gt;Why does Clojure have “keywords” in addition to “symbols”?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://clojuredocs.org/clojure.core/symbol&#34;&gt;ClojureDocs - Symbol&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://clojuredocs.org/clojure.core/keyword&#34;&gt;ClojureDocs - Keyword&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.braveclojure.com/do-things/#2_10__Quoting&#34;&gt;Clojure For The Brave and True - Quoting&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.braveclojure.com/do-things/#2_5__Keywords&#34;&gt;Clojure For The Brave and True - Keywords&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.braveclojure.com/do-things/#2_9__Symbols_and_Naming&#34;&gt;Clojure For The Brave and True - Symbols &amp;amp; Naming&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/2320348/symbols-in-clojure&#34;&gt;Symbols in Clojure&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Lonnie Johnson: Away Down In The Alley Blues</title>
      <link>/post/2015/09/lonnie-johnson-away-down-in-the-alley-blues/</link>
      <pubDate>Wed, 16 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015/09/lonnie-johnson-away-down-in-the-alley-blues/</guid>
      <description>&lt;iframe width=&#34;640&#34; height=&#34;360&#34; src=&#34;https://www.youtube.com/embed/n4Ket08gies&#34;frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Notes on Django: Population Script</title>
      <link>/post/2015/09/notes-on-django-population-script/</link>
      <pubDate>Wed, 16 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015/09/notes-on-django-population-script/</guid>
      <description>&lt;p&gt;After my last Django post I happened across &lt;a href=&#34;http://www.tangowithdjango.com/book/chapters/models.html#creating-a-population-script&#34;&gt;this population script&lt;/a&gt; from &lt;a href=&#34;http://www.tangowithdjango.com/&#34;&gt;Tango with Django&lt;/a&gt;.  So I&amp;rsquo;ve updated it and adapted it to my own needs.  Ha, Screw You &lt;a href=&#34;http://www.discoposse.com/index.php/2014/11/09/pay-yourself-first-the-art-of-reducing-technical-debt/&#34;&gt;Technical Debt!&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;example models.py&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Genre(models.Model):
    name = models.CharField()


class Musician(models.Model):
    genre = models.ManyToManyField(Genre)  # Note the m2m field
    name = models.CharField()
    bio = models.TextField()
    alive = models.BooleanField()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;example populate.py&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os


def populate():

    print &#39;Populating Database...&#39;
    print &#39;----------------------\n&#39;

    username = &#39;uname&#39;
    email = &#39;uname@domain.com&#39;
    password = &#39;secret&#39;

    blues = add_genre(&#39;Blues&#39;)
    jazz = add_genre(&#39;Jazz&#39;)

    add_musician(&#39;Billie Holiday&#39;,
                &#39;Eleanora Fagan, professionally known as Billie Holiday, was \
                an American jazz musician and singer-songwriter. Nicknamed \
                &amp;quot;Lady Day&amp;quot; by her friend and music partner Lester Young, \
                Holiday had a seminal influence on jazz music and pop singing. \
                Her vocal style, strongly inspired by jazz instrumentalists, \
                pioneered a new way of manipulating phrasing and tempo.&#39;,
                False,
                blues, jazz)

    add_musician(&#39;Big Mama Thornton&#39;,
                &amp;quot;Willie Mae &#39;Big Mama&#39; Thornton was an American rhythm and \
                blues singer and songwriter. She was the first to record \
                Leiber and Stoller&#39;s &#39;Hound Dog&#39; in 1952, which became her \
                biggest hit. It spent seven weeks at number one on the \
                Billboard R&amp;amp;B charts in 1953 and sold almost two million \
                copies. However, her success was overshadowed three years \
                later, when Elvis Presley recorded his more popular rendition \
                of &#39;Hound Dog&#39;. Similarly, Thornton&#39;s &#39;Ball &#39;n&#39; Chain&#39; had a \
                bigger impact when performed and recorded by Janis Joplin in \
                the late 1960s.&amp;quot;,
                False,
                blues)

    add_musician(&#39;Ella Fitzgerald&#39;,
                &#39;Ella Jane Fitzgerald was an American jazz singer often \
                referred to as the First Lady of Song, Queen of Jazz and \
                Lady Ella. She was noted for her purity of tone, impeccable \
                diction, phrasing and intonation, and a &amp;quot;horn-like&amp;quot; \
                improvisational ability, particularly in her scat singing.&#39;,
                False,
                jazz)


    create_super_user(username, email, password)

    print &#39;\nCurrently Populated:&#39;
    print &#39;--------------------\n&#39;

    for m in Musician.objects.all():
        for g in Genre.objects.filter(musician__name__startswith=m):
            print &#39;- {0}: {1}&#39;.format(str(m), str(g))

    print &#39;\nSuperUser:&#39;, User.objects.get(is_superuser=True).username
    print &#39;\n&#39; + (&#39;=&#39; * 80) + &#39;\n&#39;


def add_genre(name):
    g, created = Genre.objects.get_or_create(name=name)
    &#39;&#39;&#39;
    get_or_create returns a tuple of (object, created), where
    the object is the db entry and created is a Boolean referring
    to whether the object was just created or not.  So, if nothing&#39;s
    gone wrong False will indicate the object already exists
    &#39;&#39;&#39;
    print &#39;- Genre: {0}, Created: {1}&#39;.format(str(g), str(created))
    return g


def add_musician(name, bio, alive, *genre):
    m, created = Musician.objects.get_or_create(name=name,
                                                bio=bio,
                                                alive=alive)
    m.genre.add(*genre)
    print &#39;- Musician: {0}, Created: {1}&#39;.format(str(m), str(created))
    return m


def create_super_user(username, email, password):
    &#39;&#39;&#39;
    for some reason get_or_create didn&#39;t work with creating the
    SuperUser so here is a try/except, with an IntegrityError
    raised if the SuperUser already exists
    &#39;&#39;&#39;
    try:
        u = User.objects.create_superuser(username, email, password)
        return u
    except IntegrityError:
        pass

if __name__ == &#39;__main__&#39;:
    print &#39;\n&#39; + (&#39;=&#39; * 80) + &#39;\n&#39;
    import django
    os.environ.setdefault(&#39;DJANGO_SETTINGS_MODULE&#39;,
                          &#39;Project.settings&#39;)
    django.setup()
    from app.models import Genre, Musician
    from django.contrib.auth.models import User
    from django.db import IntegrityError
    populate()  # Call the populate function, which calls the
                # add_genre and add_musician functions

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And in our root project directory, where &lt;code&gt;manage.py&lt;/code&gt; is, we run our script.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;vagrant@django:~/shared/ProjectRootDirectory$ python populate.py
================================================================================

Populating Database...
----------------------

- Genre: Blues, Created: True
- Genre: Jazz, Created: True
- Musician: Billie Holiday, Created: True
- Musician: Big Mama Thornton, Created: True
- Musician: Ella Fitzgerald, Created: True

Currently Populated:
--------------------

- Billie Holiday: Jazz
- Billie Holiday: Blues
- Big Mama Thornton: Blues
- Ella Fitzgerald: Jazz

SuperUser: uname

================================================================================
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, buggering about with models and the database just got easier, now that it takes minutes to destroy it and rebuild it. Super.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Notes on Clojure: Dipping My Toes In</title>
      <link>/post/2015/09/clojure-dipping-toes/</link>
      <pubDate>Fri, 04 Sep 2015 00:00:00 +0000</pubDate>
      
      <guid>/post/2015/09/clojure-dipping-toes/</guid>
      <description>&lt;p&gt;Maybe because I&amp;rsquo;m such a late arrival to this programming pastime, I feel a certain inadequacy, a need to over compensate.  Or maybe I just find it exciting learning new things, and I just want to get deeper and consume everything.  Anyway, I&amp;rsquo;ve been getting more interested in functional programming, I don&amp;rsquo;t know why.  I&amp;rsquo;m not so embedded in object-oriented, and I&amp;rsquo;ve been trying to understand JavaScript&amp;rsquo;s prototype-based programming, and if I&amp;rsquo;m honest, these concepts aren&amp;rsquo;t yet meaningful enough to me to matter so much outside of syntax and the practicalities of how to write code, yet functional programming seems to make a certain amount of sense. Perhaps this will become an endeavour in proving myself wrong. So, I listened to &lt;a href=&#34;https://twitter.com/gigasquid&#34;&gt;Carin Meier&lt;/a&gt; on &lt;a href=&#34;https://changelog.com/171/&#34;&gt;The Changelog&lt;/a&gt; and bought &lt;a href=&#34;http://www.amazon.co.uk/Living-Clojure-Carin-Meier/dp/1491909048/ref=sr_1_1?ie=UTF8&amp;amp;qid=1441319254&amp;amp;sr=8-1&amp;amp;keywords=living+clojure&#34;&gt;her book&lt;/a&gt;, and am going to start learning Clojure.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://leiningen.org/&#34;&gt;Leiningen&lt;/a&gt; is the tool Carin recommends for getting started with Clojure, so let&amp;rsquo;s install that.
Check Java is installed first:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ java -version
java version &amp;quot;1.7.0_80&amp;quot;
Java(TM) SE Runtime Environment (build 1.7.0_80-b15)
Java HotSpot(TM) 64-Bit Server VM (build 24.80-b11, mixed mode)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Initially I used my package manager to install Leiningen, but this installed an old version.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get update
$ sudo apt-get leiningen
$ lein -v
Leiningen 1.7.1 on Java 1.7.0_80 Java HotSpot(TM) 64-Bit Server VM
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, I uninstalled that, and followed the instructions on the Leiningen site.  Copy and Paste the contents of the &lt;a href=&#34;https://github.com/technomancy/leiningen/blob/stable/bin/lein&#34;&gt;lein&lt;/a&gt; file, into a file called &lt;code&gt;lein&lt;/code&gt;.  Move the file into my &lt;code&gt;$PATH&lt;/code&gt;, and make it executable.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get remove leiningen # remove apt-get installed lein
$ vim ~/lein # copy and paste the contents of the lein file
$ echo $PATH # check path
/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games
:/usr/lib/jvm/java-7-oracle/bin:/usr/lib/jvm/java-7-oracle/db/bin:/usr/lib/jvm/java-7-or
acle/jre/bin:/usr/lib/jvm/java-7-oracle/bin:/usr/lib/jvm/java-7-oracle/db/bin:/usr/lib/j
vm/java-7-oracle/jre/bin
$ mv ~/lein /usr/bin/lein # move the lein file into my $PATH
$ chmod a+x /usr/bin/lein # make it executable
$ lein # aaaaaand run it!
 Downloading Leiningen to /home/willem/.lein/self-installs/leiningen-2.5.2-standalone.jar now...                                                                       [1050/1997]
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100   406    0   406    0     0    653      0 --:--:-- --:--:-- --:--:--   652
100 15.0M  100 15.0M    0     0  4160k      0  0:00:03  0:00:03 --:--:-- 6334k
Leiningen is a tool for working with Clojure projects.

Several tasks are available:
change              Rewrite project.clj by applying a function.
check               Check syntax and warn on reflection.
classpath           Print the classpath of the current project.
clean               Remove all files from project&#39;s target-path.
compile             Compile Clojure source into .class files.
deploy              Build and deploy jar to remote repository.
deps                Download all dependencies.
do                  Higher-order task to perform other tasks in succession.
help                Display a list of tasks or help for a given task.
install             Install the current project to the local repository.
jar                 Package up all the project&#39;s files into a jar file.
javac               Compile Java source files.
new                 Generate project scaffolding based on a template.
plugin              DEPRECATED. Please use the :user profile instead.
pom                 Write a pom.xml file to disk for Maven interoperability.
release             Perform :release-tasks.
repl                Start a repl session either with the current project or standalone.
retest              Run only the test namespaces which failed last time around.
run                 Run a -main function with optional command-line arguments.
search              Search remote maven repositories for matching jars.
show-profiles       List all available profiles or display one if given an argument.
test                Run the project&#39;s tests.
trampoline          Run a task without nesting the project&#39;s JVM inside Leiningen&#39;s.
uberjar             Package up the project files and dependencies into a jar file.
update-in           Perform arbitrary transformations on your project map.
upgrade             Upgrade Leiningen to specified version or latest stable.
vcs                 Interact with the version control system.
version             Print version for Leiningen and the current JVM.
with-profile        Apply the given task with the profile(s) specified.

Run `lein help $TASK` for details.

Global Options:
  -o             Run a task offline.
  -U             Run a task after forcing update of snapshots.
  -h, --help     Print this help or help for a specific task.
  -v, --version  Print Leiningen&#39;s version.

See also: readme, faq, tutorial, news, sample, profiles, deploying, gpg,
mixed-source, templates, and copying.

$
$ lein -v # check the version again, 2.5.2 &amp;gt; 1.7.1, super.
Leiningen 2.5.2 on Java 1.7.0_80 Java HotSpot(TM) 64-Bit Server VM
$
$ lein repl # Fire up the REPL, first time this did some more stuff, see below
            # but subsequent times it didn&#39;t, no worries.
Retrieving org/clojure/tools.nrepl/0.2.10/tools.nrepl-0.2.10.pom from central
Retrieving org/clojure/pom.contrib/0.1.2/pom.contrib-0.1.2.pom from central
Retrieving org/sonatype/oss/oss-parent/7/oss-parent-7.pom from central
Retrieving clojure-complete/clojure-complete/0.2.3/clojure-complete-0.2.3.pom from clojars
Retrieving org/clojure/clojure/1.7.0/clojure-1.7.0.pom from central
Retrieving org/clojure/clojure/1.7.0/clojure-1.7.0.jar from central
Retrieving org/clojure/tools.nrepl/0.2.10/tools.nrepl-0.2.10.jar from central
Retrieving clojure-complete/clojure-complete/0.2.3/clojure-complete-0.2.3.jar from clojars
nREPL server started on port 33732 on host 127.0.0.1 - nrepl://127.0.0.1:33732
REPL-y 0.3.7, nREPL 0.2.10
Clojure 1.7.0
Java HotSpot(TM) 64-Bit Server VM 1.7.0_80-b15
   Docs: (doc function-name-here)
         (find-doc &amp;quot;part-of-name-here&amp;quot;)
 Source: (source function-name-here)
Javadoc: (javadoc java-object-or-class-here)
   Exit: Control+D or (exit) or (quit)
Results: Stored in vars *1, *2, *3, an exception in *e

user=&amp;gt;
user=&amp;gt; quit
Bye for now!
$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So the following is basically just me following along with Carin&amp;rsquo;s book, where she starts to introduce Clojure.  So all credit goes to her, I&amp;rsquo;m just a messenger.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ lein new wonderland # start a new Clojure project
Generating a project called wonderland based on the &#39;default&#39; template.
The default template is intended for library projects, not applications.
To see other templates (app, plugin, etc), try `lein help new`.
$ cd wonderland/ # change into it
/wonderland$ lein repl # and get the REPL going again
nREPL server started on port 50609 on host 127.0.0.1 - nrepl://127.0.0.1:50609
REPL-y 0.3.7, nREPL 0.2.10
Clojure 1.7.0
Java HotSpot(TM) 64-Bit Server VM 1.7.0_80-b15
    Docs: (doc function-name-here)
          (find-doc &amp;quot;part-of-name-here&amp;quot;)
  Source: (source function-name-here)
 Javadoc: (javadoc java-object-or-class-here)
    Exit: Control+D or (exit) or (quit)
 Results: Stored in vars *1, *2, *3, an exception in *e

user=&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;g
; Some basic number stuff. Clojure is littered with parenthesis, you get used to
; it.  Clojure structures things differently to what I&amp;rsquo;m used to.  The operator
; goes first, then the parameters it takes.  I really quite like this, it&amp;rsquo;s a
; nice way of organising things, though I can see it might annoy some people.
user=&amp;gt; (+ 1 1)
2
user=&amp;gt; 42
42
user=&amp;gt; &lt;sup&gt;6&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;  ; Clojure will reduce a ratio if it can.
            ; This is different to division
2
user=&amp;gt; &lt;sup&gt;8&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;  ; And won&amp;rsquo;t if it can&amp;rsquo;t, but will leave it as a ratio, rather than
            ; change it to a decimal
&lt;sup&gt;8&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;
user=&amp;gt; 6.0/3 ; you can&amp;rsquo;t use decimals in a ratio.
NumberFormatException Invalid number: 6.0/3  clojure.lang.LispReader.readNumber (LispReader.java:330)&lt;/p&gt;

&lt;p&gt;user=&amp;gt; &lt;sup&gt;6&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;.0
NumberFormatException Invalid number: &lt;sup&gt;6&lt;/sup&gt;&amp;frasl;&lt;sub&gt;3&lt;/sub&gt;.0  clojure.lang.LispReader.readNumber (LispReader.java:330)&lt;/p&gt;

&lt;p&gt;user=&amp;gt; 6.0/3.0&lt;/p&gt;

&lt;p&gt;NumberFormatException Invalid number: 6.0/3.0  clojure.lang.LispReader.readNumber (LispReader.java:330)
user=&amp;gt; (/ 6 3)
2
user=&amp;gt; (/ 3 6) ; Dividing whole numbers will result in a ratio
&lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;2&lt;/sub&gt;
user=&amp;gt; (/ 3.0 6.0) ; To get a decimal result, use a decimal in the equation
0.5
user=&amp;gt; (/ 3.0 6)
0.5
user=&amp;gt; &amp;ldquo;blues&amp;rdquo; ; yep, that&amp;rsquo;s a string
&amp;ldquo;blues&amp;rdquo;
user=&amp;gt; blues
CompilerException java.lang.RuntimeException: Unable to resolve symbol: blues in this context, compiling:(/tmp/form-init7599042722842248080.clj:1:1010)&lt;/p&gt;

&lt;p&gt;user=&amp;gt; true ; Ain&amp;rsquo;t nothing going on but a boolean, yo.
true
user=&amp;gt; nil ; nil is the absence of a value, like None in Python
nil
user=&amp;gt; (+ 5 (- 4 2)) ; Here&amp;rsquo;s the beginning of the growth of the parens
7
user=&amp;gt; &amp;lsquo;(5 &amp;ldquo;blues&amp;rdquo; :music) ; A list is denoted with a &amp;lsquo;
(5 &amp;ldquo;blues&amp;rdquo; :music)
user=&amp;gt; (first &amp;lsquo;(5, &amp;ldquo;blues&amp;rdquo;, :music)) ; first gives us the first list item
5
user=&amp;gt; (rest &amp;lsquo;(5, &amp;ldquo;blues&amp;rdquo;, :music)) ; and rest, the rest
(&amp;ldquo;blues&amp;rdquo; :music)
user=&amp;gt; (first (rest &amp;lsquo;(5, &amp;ldquo;blues&amp;rdquo;, :music))) ; we can nest these fuctions
&amp;ldquo;blues&amp;rdquo;
user=&amp;gt; (cons &amp;ldquo;down&amp;rdquo; &amp;lsquo;(5, &amp;ldquo;blues&amp;rdquo;, :music)) ; and use cons to add to our list
(&amp;ldquo;down&amp;rdquo; 5 &amp;ldquo;blues&amp;rdquo; :music)
user=&amp;gt; (cons &amp;ldquo;down&amp;rdquo; (cons 7 &amp;lsquo;(5, &amp;ldquo;blues&amp;rdquo;, :music))) ; and nest our cons
(&amp;ldquo;down&amp;rdquo; 7 5 &amp;ldquo;blues&amp;rdquo; :music)
```&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s as far as I got last night. I know it&amp;rsquo;s not far, but having kids makes me tired.  And I just want to reiterate again, this is basically just regurgitating Carin&amp;rsquo;s work, go &lt;a href=&#34;http://www.amazon.co.uk/Living-Clojure-Carin-Meier/dp/1491909048/ref=sr_1_1?ie=UTF8&amp;amp;qid=1441319254&amp;amp;sr=8-1&amp;amp;keywords=living+clojure&#34;&gt;buy her book&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Interestingly, the name &lt;em&gt;Leiningen&lt;/em&gt; comes from the short story &lt;a href=&#34;http://www.classicshorts.com/stories/lvta.html&#34;&gt;Leiningen versus the Ants&lt;/a&gt;.  A tale of plantation owner Leiningen&amp;rsquo;s battle against an invading army of flesh-eating ants.  It&amp;rsquo;s a really good read, triumph over adversity, the importance of intelligence and resourcefulness, I highly recommend you &lt;a href=&#34;http://www.classicshorts.com/stories/lvta.html&#34;&gt;read&lt;/a&gt; it.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>